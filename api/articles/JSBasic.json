{"title":"JavaScript基础","uid":"415519e90c14ac35f714ee5f282d32fe","slug":"JSBasic","date":"2025-10-14T14:30:36.000Z","updated":"2025-10-14T15:57:08.362Z","comments":true,"path":"api/articles/JSBasic.json","keywords":"HerikoDeltana,HRiver2,","cover":"https://pic1.imgdb.cn/item/68ee5fe0c5157e1a886febad.jpg","content":"<p>「？」</p>\r\n<span id=\"more\"></span>\r\n<!-- toc -->\r\n<p>如果有 C/C++/Python/Matlab(?) 基础的话，JavaScript\r\n这些基础内容理解起来会相当简单（</p>\r\n<h2 id=\"javascript-基础\">01 JavaScript 基础</h2>\r\n<h3 id=\"如何引用-javascript\">1.1 如何引用 JavaScript</h3>\r\n<h4 id=\"直接引用\">直接引用</h4>\r\n<p>使用 <code>&lt;script&gt;&lt;/script&gt;</code> 标签内嵌\r\nJavaScript，代码直接写进 html 内容中，如：</p>\r\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"comment\">/*sth*/</span></span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">/*你的 JS 内容 :D*/</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\r\n<h4 id=\"外联文件\">外联文件</h4>\r\n<p>通过给 <code>&lt;script&gt;&lt;/script&gt;</code> 指定 src\r\n属性，表示要引入的 JavaScript 脚本文件的 URL，例如：</p>\r\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./index.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\r\n<p>后期对接 api 的时候往往要用到这个方式。</p>\r\n<p>简单了解 JS 的加载机制：</p>\r\n<ul>\r\n<li><p>浏览器默认是同步执行 JavaScript 代码，即 HTML 解析到\r\n<code>&lt;script&gt;&lt;/script&gt;</code> 时会暂停解析，执行 JavaScript\r\n代码，会造成阻塞的效果。</p></li>\r\n<li><p>浏览器解析html是从上到下的，如果在 JavaScript 代码里有对 HTML\r\n节点的操作，想要操作的节点在 <code>&lt;script&gt;&lt;/script&gt;</code>\r\n下面的话，执行 JavaScript\r\n代码的时候由于还没解析到后面的内容，所以拿不到对应节点，解决方法是把所有自己写的代码放在\r\n<code>&lt;body&gt;&lt;/body&gt;</code> 的最后面，或者是监听 document 的\r\nload 事件。</p></li>\r\n</ul>\r\n<p>除此之外，<code>&lt;script&gt;&lt;/script&gt;</code> 也有属性：</p>\r\n<ul>\r\n<li>async 属性指定 JavaScript\r\n代码<strong>异步执行</strong>，不会造成阻塞效果，注意这时候后面的节点有没有解析完仍然是不确定的，这个还是比较常用的。</li>\r\n<li>defer 该属性指定 JavaScript\r\n代码不是立即执行，而是<strong>页面解析完成后执行</strong>。</li>\r\n<li>type 属性指定加载脚本文件的类型，传统 JavaScript\r\n脚本（就是我们现在正在写的这种）的类型是\r\ntext/javascript，默认值就是这个，所以可以忽略，还有其它的可以自行查阅文档。</li>\r\n</ul>\r\n<h3 id=\"输出方式\">1.2 输出方式</h3>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'Ciallo～(∠·ω&lt; )⌒★'</span>);</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"string\">'柚子厨蒸鹅心'</span>);</span><br></pre></td></tr></table></figure>\r\n<p>第一个会在终端中输出\r\n<code>Ciallo～(∠·ω&lt; )⌒★</code>，而第二个会让浏览器通过弹窗出示：<code>柚子厨蒸鹅心</code>。</p>\r\n<p>通过这两个方式，我们可以了解 JS 的运行状态，便于调试。</p>\r\n<h3 id=\"变量与数据类型\">1.3 变量与数据类型</h3>\r\n<h4 id=\"变量声明\">变量声明</h4>\r\n<p>在 JavaScript 中，变量用于存储数据值。JavaScript\r\n提供了三种关键字来声明变量：<code>var</code>、<code>let</code> 和\r\n<code>const</code>。</p>\r\n<ol type=\"1\">\r\n<li><p><strong><code>var</code></strong>:</p>\r\n<ul>\r\n<li><code>var</code> 是 ES5 及之前版本中声明变量的唯一方式。</li>\r\n<li><code>var</code>\r\n声明的变量具有函数作用域或全局作用域，没有块级作用域，和\r\n<code>let</code> 不同。</li>\r\n<li>一个变量在声明之前使用（在未声明的时候是 undefined）。</li>\r\n</ul>\r\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 输出 10</span></span><br></pre></td></tr></table></figure></p>\r\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 输出 undefined，因为没有定义</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p><strong><code>let</code></strong>:</p>\r\n<ul>\r\n<li><code>let</code> 是 ES6 中引入的，用于声明块级作用域的变量。</li>\r\n<li><code>let</code> 声明的变量不能在声明之前使用。</li>\r\n</ul>\r\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = <span class=\"number\">30</span>; <span class=\"comment\">// 这是一个新的块级作用域变量b</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 输出: 30</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 输出: 20</span></span><br></pre></td></tr></table></figure></p></li>\r\n<li><p><strong><code>const</code></strong>:</p>\r\n<ul>\r\n<li><code>const</code> 也是ES6中引入的，用于声明常量。</li>\r\n<li><code>const</code>\r\n声明的变量必须被初始化，且其值在初始化后不能被重新赋值但如果是对象或数组，其内部属性或元素可以被修改。</li>\r\n<li><code>const</code> 也具有块级作用域。</li>\r\n</ul>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"string\">'Hello'</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c); <span class=\"comment\">// 输出: Hello</span></span><br><span class=\"line\">c = <span class=\"string\">'World'</span>; <span class=\"comment\">// 错误，因为 c 是常量</span></span><br></pre></td></tr></table></figure></li>\r\n</ol>\r\n<h4 id=\"数据类型\">数据类型</h4>\r\n<p>JavaScript\r\n是一种动态类型语言，这意味着变量的类型是在运行时确定的。JavaScript\r\n中有以下几种基本数据类型:</p>\r\n<ol type=\"1\">\r\n<li><p><strong><code>Number</code></strong>:</p>\r\n<ul>\r\n<li>用于表示整数和浮点数。</li>\r\n<li>数值范围是 -2<sup>1023</sup> ~ 2<sup>1024</sup> 超出此范围会变成\r\n(-)Infinity。</li>\r\n<li>特殊值:<code>NaN</code>(Not-a-Number，非数字值)，<code>Infinity</code>\r\n正无穷大和 <code>-Infinity</code>\r\n负无穷大，Infinity加上-Infinity等于NaN。</li>\r\n</ul>\r\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num1 = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> num2 = <span class=\"number\">3.14</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> notANumber = <span class=\"title class_\">NaN</span>;</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p><strong><code>String</code></strong>:</p>\r\n<ul>\r\n<li>用于表示文本数据。</li>\r\n<li>可以使用单引号<code>'</code>、双引号<code>\"</code>或反引号<code>`</code>，模板字符串来创建字符串。</li>\r\n</ul>\r\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str1 = <span class=\"string\">'Ciallo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str2 = <span class=\"string\">\"～(∠·ω&lt; )⌒★\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> templateStr = <span class=\"string\">`有地先生， <span class=\"subst\">${str1}</span><span class=\"subst\">${str2}</span>`</span>; <span class=\"comment\">// 模板字符串，可以插入变量来构成</span></span><br></pre></td></tr></table></figure></p></li>\r\n<li><p><strong><code>Boolean</code></strong>:</p>\r\n<ul>\r\n<li>用于表示真（<code>true</code>）\r\n或假（<code>false</code>），一般用来做逻辑判断。</li>\r\n</ul>\r\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> isFalse = <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p><strong><code>Undefined</code></strong>:</p>\r\n<ul>\r\n<li>表示一个变量已声明但未赋值，前面提到过。</li>\r\n</ul>\r\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> undefinedVar;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(undefinedVar); <span class=\"comment\">// 输出: undefined</span></span><br></pre></td></tr></table></figure></p></li>\r\n<li><p><strong><code>Null</code></strong>:</p>\r\n<ul>\r\n<li>表示一个空值或不存在的值。</li>\r\n<li><code>Null</code>是 JavaScript 中的一个字面量，与\r\n<code>undefined</code> 不同，但 <code>typeof null</code> 会返回\r\n<code>\"object\"</code>，这大概是一个历史遗留问题。</li>\r\n</ul>\r\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> nullVar = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nullVar); <span class=\"comment\">// 输出: null</span></span><br></pre></td></tr></table></figure></p></li>\r\n<li><p><strong><code>Object</code></strong>:</p>\r\n<ul>\r\n<li>用于存储键值对和更复杂的实体。</li>\r\n<li>对象可以是普通对象、数组、函数等。</li>\r\n</ul>\r\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = { <span class=\"attr\">name</span>: <span class=\"string\">'Deltana'</span>, <span class=\"attr\">age</span>: <span class=\"number\">19</span> }; <span class=\"comment\">// 键值对，key: value，一一对应</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]; <span class=\"comment\">// 下标从 0 开始</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) { <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'BF6'</span>); };</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">name</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj[<span class=\"string\">\"name\"</span>]);</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p><strong><code>Array</code></strong>:</p>\r\n<ul>\r\n<li>列表，一种特殊的对象类型，用于存储<strong>有序的元素集合</strong>。</li>\r\n<li>数组的元素可以是任何数据类型，是的，可以在里面套娃列表，再套娃函数（</li>\r\n<li>至于数组，<a href=\"#数组操作\">2.2</a> 会做更多解释。</li>\r\n</ul>\r\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">'#F0F8FF'</span>， <span class=\"string\">'#9DB7A5'</span>， <span class=\"string\">'#FEFFF0'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dic = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\">dic[<span class=\"string\">'one'</span>] = <span class=\"number\">1</span>; <span class=\"comment\">// 用 one:1 这样的键值对来作为元素</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> dic[<span class=\"string\">'one'</span>]; <span class=\"comment\">// 删除元素</span></span><br></pre></td></tr></table></figure></p></li>\r\n<li><p><strong><code>Function</code></strong>:</p>\r\n<ul>\r\n<li>在 JavaScript\r\n中，函数也是对象，但它们可以像其他数据类型一样被赋值给变量、作为参数传递或作为返回值，这个同样后面会稍微详细一些说。</li>\r\n</ul>\r\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">greet</span>(<span class=\"params\">name</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`Hello， <span class=\"subst\">${name}</span>!`</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">let</span> greetFunc = <span class=\"keyword\">function</span>(<span class=\"params\">name</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`Hi， <span class=\"subst\">${name}</span>!`</span>;</span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure></p></li>\r\n</ol>\r\n<h4 id=\"类型转换\">类型转换</h4>\r\n<p>JavaScript 在需要时会自动进行类型转换，但也可以手动进行转换。</p>\r\n<ul>\r\n<li><strong>隐式类型转换</strong>:\r\n<ul>\r\n<li>当运算符应用于不同类型的值时，JavaScript\r\n会尝试将它们转换为相同的类型，然后执行运算。</li>\r\n</ul>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"string\">'5'</span> + <span class=\"number\">2</span>; <span class=\"comment\">// 字符串连接，输出: '52'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> numResult = <span class=\"string\">'5'</span> - <span class=\"number\">2</span>; <span class=\"comment\">// 字符串转换为数字，然后执行减法，输出: 3</span></span><br></pre></td></tr></table></figure></li>\r\n<li><strong>显式类型转换</strong>:\r\n<ul>\r\n<li>使用 JavaScript 提供的函数来显式地将一个值转换为另一种类型。</li>\r\n</ul>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numStr = <span class=\"string\">'42'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"title class_\">Number</span>(numStr); <span class=\"comment\">// 字符串转换为数字，输出: 42</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> bool = <span class=\"title class_\">Boolean</span>(num); <span class=\"comment\">// 数字转换为布尔值非0数字为true，输出: true</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> strBool = <span class=\"title class_\">String</span>(bool); <span class=\"comment\">// 布尔值转换为字符串，输出: 'true'</span></span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n<p>了解这些基本概念对于编写健壮的 JavaScript\r\n代码至关重要。在实际开发中，要注意变量的作用域和生命周期，以及数据类型之间的转换规则，以避免潜在的错误和性能问题，有些时候避免隐式类型转换很有助于减少\r\nBUG 的出现~</p>\r\n<h3 id=\"运算符与表达式\">1.4 运算符与表达式</h3>\r\n<p>JS 的运算符和表达式和 C/C++ 还是非常相近的。</p>\r\n<h4 id=\"算术运算符\">算术运算符</h4>\r\n<p>算术运算符用于对数字文字或变量执行算术运算。常见的算术运算符包括:</p>\r\n<ul>\r\n<li>加法运算符(+):用于数值求和或连接字符串。</li>\r\n<li>减法运算符(-):用于两个操作数相减，结果为它们的差值。</li>\r\n<li>乘法运算符(*):返回操作数的乘积。</li>\r\n<li>除法运算符(/):返回操作数的商，左操作数是被除数，右操作数是除数。</li>\r\n<li>求余运算符((%)):返回第一个操作数对第二个操作数的模余数。</li>\r\n<li>递增运算符(++):为其操作数增加1，并返回一个数值。如果使用后置(如<code>x ++</code>)，将会在递增前返回数值;如果前置如(<code>++ x</code>)，将会在递增后返回数值。</li>\r\n<li>递减运算符(--):为其操作数减少1，并返回一个数值。使用规则与递增运算符相似。</li>\r\n<li>幂运算符(**):返回第一个操作数的第二个操作数次幂的结果，即x的y次幂。</li>\r\n</ul>\r\n<h4 id=\"赋值运算符\">赋值运算符</h4>\r\n<p>赋值运算符用于为变量分配值。最基础的赋值运算符是“=”，它将右侧的值分配给左侧的变量。除了基础赋值运算符外，JavaScript还支持复合赋值运算符，它们在进行赋值的同时，还可以附带执行一些其他的运算。常见的复合赋值运算符包括:</p>\r\n<ul>\r\n<li>加等(+=):将赋值运算符右侧的值加到左侧的变量上，然后将运算结果赋给左侧的变量。</li>\r\n<li>减等(-=):将赋值运算符左侧的变量减去右侧的值，然后将运算结果赋给左侧的变量。</li>\r\n<li>乘等(*=):将赋值运算符左侧的变量乘以右侧的值，然后将运算结果赋给左侧的变量。</li>\r\n<li>除等(/=):将赋值运算符左侧的变量除以右侧的值，然后将运算结果赋给左侧的变量。</li>\r\n<li>取模等(%=):将赋值运算符左侧的变量对右侧的值取模，然后将取模运算的结果赋给左侧的变量。</li>\r\n</ul>\r\n<h4 id=\"比较运算符\">比较运算符</h4>\r\n<p>比较运算符用于比较两个值的大小，并返回一个布尔值。常见的比较运算符包括:</p>\r\n<ul>\r\n<li>大于运算符(&gt;):如果左边的值大于右边的值，则返回true。</li>\r\n<li>小于运算符(&lt;):如果左边的值小于右边的值，则返回true。</li>\r\n<li>大于或等于运算符(&gt;=):如果左边的值大于或等于右边的值，则返回true。</li>\r\n<li>小于或等于运算符(&lt;=):如果左边的值小于或等于右边的值，则返回true。</li>\r\n<li>相等运算符(==):如果两个值相等在转换之后，则返回true。</li>\r\n<li>严格相等运算符(===):如果<strong>两个值严格相等，即值和类型都相等</strong>，则返回true。</li>\r\n<li>不相等运算符(!=):如果两个值不相等在转换之后，则返回true。</li>\r\n<li>严格不相等运算符(!==):如果<strong>两个值严格不相等。即值和类型都不相等</strong>，则返回true。</li>\r\n</ul>\r\n<h4 id=\"逻辑运算符\">逻辑运算符</h4>\r\n<p>逻辑运算符用于布尔运算，常见的逻辑运算符包括:</p>\r\n<ul>\r\n<li>与运算符(&amp;&amp;):如果两个操作数都为true，则返回true;否则返回false。</li>\r\n<li>或运算符(||):如果至少有一个操作数为true，则返回true;否则返回false。</li>\r\n<li>非运算符(!):取反布尔值，如果操作数为true，则返回false;反之亦然。</li>\r\n</ul>\r\n<h4 id=\"三元运算符三目运算符\">三元运算符(三目运算符)</h4>\r\n<p>它由三个操作数组成，使用问号?和冒号:来表示。其语法为:(条件表达式 ?\r\n表达式1 : 表达式2)</p>\r\n<p>如果条件表达式为真，则返回表达式1的值;如果条件表达式为假，则返回表达式2的值。</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> chip = <span class=\"string\">\"8Eilte Gen5\"</span>;  </span><br><span class=\"line\"><span class=\"keyword\">let</span> judge17 = (chip === <span class=\"string\">\"8Eilte Gen5\"</span>) ? <span class=\"string\">\"Mi 17\"</span> : <span class=\"string\">\"iPhone 17\"</span>;  </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(judge17);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"流程控制\">1.6 流程控制</h3>\r\n<p>人工智障核心出装 (x)</p>\r\n<h4 id=\"if-语句\">if 语句</h4>\r\n<p><code>if</code>\r\n语句是最基础且广泛使用的条件语句。它允许我们根据一个或多个条件来执行特定的代码块。<code>if</code>语句的基本结构如下:</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title class_\">Wonderhoy</span> == <span class=\"literal\">true</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"Wonderhoy!\"</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\r\n<p>此外，<code>if</code> 语句还可以与 <code>else</code> 或\r\n<code>else if</code> 结合使用，以提供在条件不满足时的备选执行路径:</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (mOnesy &gt;= <span class=\"title class_\">Zywoo</span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"Top2\"</span>);</span><br><span class=\"line\">} <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mOoonesy &gt;= <span class=\"title class_\">Zyw</span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"Top2\"</span>);</span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 当上述条件都不满足时执行的代码</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"switch-语句\">switch 语句</h4>\r\n<p><code>switch</code>\r\n语句为我们提供了一种多分支的条件选择结构。它基于一个表达式的值，从多个可能的代码块中选择一个来执行。<code>switch</code>\r\n语句的基本结构如下:</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (表达式) {</span><br><span class=\"line\">  <span class=\"keyword\">case</span> 值<span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 当表达式的值为值1时执行的代码</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span>; <span class=\"comment\">// 可选，但建议使用以避免执行“贯穿到底”</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> 值<span class=\"number\">2</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 当表达式的值为值2时执行的代码</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"attr\">default</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 当表达式的值不匹配任何case时执行的代码</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"for-循环\">for 循环</h4>\r\n<p><code>for</code>\r\n循环是一种基于条件的循环结构，它允许我们重复执行一段代码，直到指定的条件不再满足。<code>for</code>\r\n循环的基本结构如下:</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">998244353</span>; i ++) { <span class=\"comment\">// 初始; 条件; 迭代</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"while-循环\">while 循环</h4>\r\n<p><code>while</code> 循环会在指定的条件为真时重复执行一段代码。与\r\n<code>for</code> 循环不同，<code>while</code>\r\n循环在进入循环体之前不会执行初始化或迭代操作。<code>while</code>\r\n循环的基本结构如下:</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> canIsmile = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (++ canIsmile &lt;= <span class=\"number\">40</span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"No\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"Ciallo～(∠·ω&lt; )⌒★\"</span>);</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"do...while-循环\">do...while 循环</h4>\r\n<p><code>do...while</code> 循环与 <code>while</code>\r\n循环类似，但它至少会执行一次循环体，即使在条件第一次检查时为假也是如此。<code>do...while</code>\r\n循环的基本结构如下:</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 至少执行一次的代码</span></span><br><span class=\"line\">} <span class=\"keyword\">while</span> (条件表达式);</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"函数与数组\">02 函数与数组</h2>\r\n<h3 id=\"函数基础\">2.1 函数基础</h3>\r\n<h4 id=\"函数声明与调用\">函数声明与调用</h4>\r\n<p>在 JavaScript\r\n中，函数是一段可以执行特定任务的代码块。函数声明是定义函数的一种方式，其基本语法如下:</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> 函数名(参数<span class=\"number\">1</span>, 参数<span class=\"number\">2</span>, ...) {</span><br><span class=\"line\">  <span class=\"comment\">// 函数体</span></span><br><span class=\"line\">  <span class=\"comment\">// 可以包含变量声明、条件语句、循环等</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> 返回值; <span class=\"comment\">// 可选，用于返回函数执行的结果</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Project</span>(<span class=\"params\">Sekai, Colorful, Stage, feat, Hatsune, Miku, Brand, New, Your, World</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"number\">0</span> - <span class=\"number\">0</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\r\n<p>调用函数时，只需使用函数名并传入必要的参数如果有的话:</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数名(参数<span class=\"number\">1</span>的值, 参数<span class=\"number\">2</span>的值, ...);</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数表达式与匿名函数\">函数表达式与匿名函数</h4>\r\n<p>除了函数声明外，JavaScript\r\n还支持函数表达式，即将函数赋值给变量。这种方式定义的函数可以是<strong>匿名</strong>的，也可以有名字但这个名字在函数外部不可见:</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fun1 = <span class=\"keyword\">function</span>(<span class=\"params\">a, b, ...</span>) {</span><br><span class=\"line\">  <span class=\"comment\">// 函数体</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> back;</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者使用箭头函数(ES6)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fun2</span> = (<span class=\"params\">a， b， ...</span>) =&gt; {</span><br><span class=\"line\">  <span class=\"comment\">// 函数体如果只有一个表达式，可以省略大括号和return</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> back;</span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\r\n<p>匿名函数是没有名称的函数，它们通常用作回调函数或立即执行的函数表达式，还是比较常用的。</p>\r\n<h4 id=\"参数与返回值\">参数与返回值</h4>\r\n<p>函数可以接受参数，这些参数在函数体内可以作为变量使用。参数的数量和类型在函数声明时指定，但在调用时JavaScript不会进行类型检查，这意味着可以传入任意类型的值尽管这可能会导致运行时错误。</p>\r\n<p>函数可以通过 <code>return</code> 语句返回一个值。如果函数没有\r\n<code>return</code> 语句或 <code>return</code> 后面没有跟值，则默认返回\r\n<code>undefined</code>。</p>\r\n<h3 id=\"数组操作\">2.2 数组操作</h3>\r\n<h4 id=\"数组创建与访问\">数组创建与访问</h4>\r\n<p>在JavaScript中，数组是一种特殊类型的对象，用于按顺序存储一系列的值。数组的创建方式有多种，以下是几种常见的方法:</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用数组字面量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用Array构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">// 或者指定数组长度但这种方式创建的数组是空的，元素需要后续添加</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">5</span>); <span class=\"comment\">//(, , , , )</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用Array.of方法ES6引入</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = <span class=\"title class_\">Array</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>); <span class=\"comment\">// 创建一个具有可变数量参数的新数组实例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用Array.from方法ES6引入，可以将类似数组的对象或可迭代对象转换为数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr5 = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"string\">'hello'</span>); <span class=\"comment\">// ['h'， 'e'， 'l'， 'l'， 'o']</span></span><br></pre></td></tr></table></figure>\r\n<p>数组的访问则通过索引来实现，索引从0开始:</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> value = arr1[<span class=\"number\">0</span>]; <span class=\"comment\">// 访问数组的第一个元素</span></span><br></pre></td></tr></table></figure>\r\n<h4 id=\"数组方法\">数组方法</h4>\r\n<p>JavaScript提供了丰富的数组方法，以下是常用的几个:</p>\r\n<ul>\r\n<li><code>push()</code>:在数组末尾添加一个或多个元素，并返回新的数组长度。</li>\r\n<li><code>pop()</code>:移除数组末尾的元素，并返回该元素的值。</li>\r\n<li><code>shift()</code>:移除数组开头的元素，并返回该元素的值。</li>\r\n<li><code>unshift()</code>:在数组开头添加一个或多个元素，并返回新的数组长度。</li>\r\n<li><code>slice()</code>:返回一个从开始到结束不包括结束选择的数组的一部分浅拷贝。</li>\r\n<li><code>splice()</code>:通过删除或替换现有元素或者添加新元素来修改数组，并返回被删除的元素。</li>\r\n<li><code>concat()</code>:用于合并两个或多个数组。</li>\r\n<li><code>join()</code>:将数组的所有元素连接成一个字符串。</li>\r\n<li><code>indexOf()</code>:返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</li>\r\n<li><code>includes()</code>:判断一个数组是否包含一个指定的值，如果是则返回true，否则返回false。</li>\r\n</ul>\r\n<h4 id=\"迭代方法\">迭代方法</h4>\r\n<p>迭代方法是用于遍历数组并处理每个元素的高阶函数，以下是常用的几个:</p>\r\n<ul>\r\n<li><code>forEach()</code>:对数组的每个元素执行一次提供的函数。</li>\r\n<li><code>map()</code>:创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。</li>\r\n<li><code>filter()</code>:创建一个新数组，其包含通过所提供函数实现的测试的所有元素。</li>\r\n<li><code>reduce()</code>:对数组中的每个元素执行一个由您提供的reducer函数升序执行，将其结果汇总为单个返回值。</li>\r\n</ul>\r\n<p>这些方法都接受一个回调函数作为参数，该回调函数定义了如何处理数组中的每个元素。这些高阶函数极大地简化了数组的处理和转换，是现代JavaScript编程中不可或缺的工具。</p>\r\n<h3 id=\"定时器\">2.3 定时器</h3>\r\n<p>JavaScript内置了定时器相关的函数。</p>\r\n<ul>\r\n<li><code>setTimeout()</code>:\r\n用来指定某个函数或代码段在多少毫秒之后运行。 <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"string\">'console.log(2)'</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\r\n-<code>setInterval()</code> : 用法与 <code>setTimeout()</code>\r\n完全一致，区别在于 <code>setInterval()</code>\r\n指定某个任务每隔一段时间就执行一次</li>\r\n</ul>\r\n<p><code>clearTomeout()</code> 与 <code>clearInterval()</code>\r\n是对应的取消器</p>\r\n<h3 id=\"日期与时间\">2.4 日期与时间</h3>\r\n<p>通过 new 操作符创建一个新的 <code>Date</code> 对象，单位是毫秒。</p>\r\n<p>新建的一个 Unix 时间戳，它是一个整数值，表示自 1970 年 1 月 1 日\r\n00:00:00 UTC（the Unix epoch）以来的毫秒数，忽略了闰秒。大多数 Unix\r\n时间戳功能仅精确到最接近的秒。</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> now = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>() <span class=\"comment\">//到当前时间的时间戳</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> last = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">'2025-11-04 00:00:00'</span>) <span class=\"comment\">//距离某日的时间戳</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> remain = last - now  <span class=\"comment\">//现在距离那天的时间戳</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"同步与异步\">2.5 同步与异步</h3>\r\n<p>1、同步：同步操作要求任务按顺序执行，一个任务完成后才会开始下一个任务。如果某个任务需要等待，则整个程序或线程会处于阻塞状态，直到该任务完成。\r\n2、异步：异步操作则允许程序在等待某个任务完成时继续执行其他任务。当异步任务完成时，它不会阻塞主线程，而是通过回调、事件或Promise等方式来通知调用者。</p>\r\n<h2 id=\"dom操作与事件处理\">03 DOM操作与事件处理</h2>\r\n<h3 id=\"dom基础\">3.1 DOM基础</h3>\r\n<p>DOM，全称是“Document Object Model(文档对象模型)”，是由 W3C\r\n定义的一个标准。DOM 结构采用的是树形结构，用来表示页面中的每个元素。DOM\r\n的树形结构也叫“DOM\r\n树”。在这棵树上，HTML元素是树根，也叫根元素。这棵树上的 head 和 body\r\n位于同一层次上，有着共同的父节点(html)，所以 head 和 body\r\n是兄弟节点。head 有子节点，body 也有子节点，以此类推，如图：</p>\r\n<p><img src=\"https://pic1.imgdb.cn/item/68ee728dc5157e1a8870597f.png\"></p>\r\n<p>获取元素</p>\r\n<p>在JavaScript中，可以通过多种方式获取页面中的元素，以下是四种常用的方法:</p>\r\n<p><code>getElementById</code>：通过元素的ID获取元素。ID在页面中应该是唯一的，因此该方法返回的是一个唯一的元素对象。如果找不到对应的元素，则返回\r\nnull。\r\n<code>getElementsByClassName</code>：通过元素的类名获取元素。该方法返回的是一个元素集合(HTMLCollection)，即使只有一个元素符合条件，也会返回一个集合。如果没有找到任何元素，则返回一个空的集合。\r\n<code>querySelector</code>：通过CSS选择器获取元素。该方法返回的是匹配选择器的第一个元素。如果没有找到对应的元素，则返回\r\nnull。\r\n<code>querySelectorAll</code>：通过CSS选择器获取元素集合。该方法返回的是所有匹配选择器的元素集合(NodeList)。如果没有找到任何元素，则返回一个空的集合。与\r\n<code>getElementsByClassName</code>\r\n不同的是，<code>querySelectorAll</code> 支持更复杂的CSS选择器。</p>\r\n<p>注意：这里的 HTMLCollection\r\n类型，是伪数组而不是真数组，故不能使用数组的方法。</p>\r\n<h3 id=\"dom操作\">3.2 DOM操作</h3>\r\n<h4 id=\"dom-html\">DOM HTML</h4>\r\n<p>使用document.getElementById.innerHTML改变标签的HTML内容，使用document.getElementById.src改变图片的位置</p>\r\n<ol type=\"1\">\r\n<li><p><strong>innerText</strong></p>\r\n<ul>\r\n<li><strong>定义</strong>:<code>innerText</code>属性返回或设置元素的内部文本，它会自动忽略HTML标签。</li>\r\n<li><strong>用法</strong>:<code>element.innerText = \"新的文本内容\";</code></li>\r\n<li><strong>注意</strong>:当使用<code>innerText</code>设置内容时，如果内容中包含HTML标签，这些标签将不会被解析为HTML元素，而是作为普通文本显示。</li>\r\n</ul></li>\r\n<li><p><strong>innerHTML</strong></p>\r\n<ul>\r\n<li><strong>定义</strong>:<code>innerHTML</code>属性返回或设置元素的内部HTML内容(包括其标签)。</li>\r\n<li><strong>用法</strong>:<code>element.innerHTML = \"&lt;p&gt;新的HTML内容&lt;/p&gt;\";</code></li>\r\n<li><strong>注意</strong>:使用<code>innerHTML</code>时，如果插入的内容包含来自用户输入或不受信任的外部数据，可能会导致XSS(跨站脚本)攻击。因此，在插入外部数据之前，务必进行必要的验证和清理。</li>\r\n</ul></li>\r\n<li><p><strong>textContent</strong></p>\r\n<ul>\r\n<li><strong>定义</strong>:<code>textContent</code>属性返回或设置元素的文本内容，类似于<code>innerText</code>，但它不会受到CSS样式的影响(例如，不会忽略<code>display: none</code>的元素)。</li>\r\n<li><strong>用法</strong>:<code>element.textContent = \"新的文本内容\";</code></li>\r\n<li><strong>注意</strong>:与<code>innerText</code>相比，<code>textContent</code>更加简单直接，它只处理文本内容，不涉及HTML解析。</li>\r\n</ul></li>\r\n</ol>\r\n<p>注：display:none元素是无法使用innerText获取的，但是textContent却可以，无论元素隐藏与否。</p>\r\n<p>修改DOM的元素属性，可以通过document.getElementById().src =\r\n\"111\"，还可以通过调用以下函数直接改变元素类型</p>\r\n<ol type=\"1\">\r\n<li><p><strong>setAttribute</strong></p>\r\n<ul>\r\n<li><strong>定义</strong>:<code>setAttribute</code>方法用于设置元素的指定属性及其值。</li>\r\n<li><strong>用法</strong>:<code>element.setAttribute(\"属性名\"， \"属性值\");</code></li>\r\n<li><strong>示例</strong>:<code>https://www.runoob.com/try/try.php?filename=tryjsref_element_setattribute</code></li>\r\n</ul></li>\r\n<li><p><strong>removeAttribute</strong></p>\r\n<ul>\r\n<li><strong>定义</strong>:<code>removeAttribute</code>方法用于移除元素的指定属性。</li>\r\n<li><strong>用法</strong>:<code>element.removeAttribute(\"属性名\");</code></li>\r\n<li><strong>示例</strong>:<code>element.removeAttribute(\"href\");</code></li>\r\n</ul></li>\r\n</ol>\r\n<h4 id=\"dom-css\">DOM CSS</h4>\r\n<p>使用document.getElementById().style.color = \"red\"来改变CSS属性</p>\r\n<ol type=\"1\">\r\n<li><p><strong>style属性</strong></p>\r\n<ul>\r\n<li><strong>定义</strong>:<code>style</code>属性用于设置或返回元素的行内样式。</li>\r\n<li><strong>用法</strong>:<code>element.style.propertyName = \"属性值\";</code></li>\r\n<li><strong>示例</strong>:<code>element.style.color = \"red\";</code></li>\r\n<li><strong>注意</strong>:通过<code>style</code>属性可以直接修改元素的单个样式属性，但这种方式只适用于行内样式。对于外部样式表或嵌入样式表中的样式，则无法直接通过<code>style</code>属性进行修改。</li>\r\n</ul></li>\r\n<li><p><strong>classList属性</strong></p>\r\n<ul>\r\n<li><strong>定义</strong>:<code>classList</code>属性返回元素的类属性的实时集合，它提供了一系列操作类列表的方法。</li>\r\n<li><strong>用法</strong>:\r\n<ul>\r\n<li>添加类:<code>element.classList.add(\"类名\");</code></li>\r\n<li>移除类:<code>element.classList.remove(\"类名\");</code></li>\r\n<li>切换类（如果存在则移除，如果不存在则添加）:<code>element.classList.toggle(\"类名\");</code></li>\r\n<li>检查是否包含某个类:<code>element.classList.contains(\"类名\");</code></li>\r\n</ul></li>\r\n<li><strong>示例</strong>:\r\n<ul>\r\n<li>添加类:<code>element.classList.add(\"active\");</code></li>\r\n<li>移除类:<code>element.classList.remove(\"active\");</code></li>\r\n<li>切换类:<code>element.classList.toggle(\"active\");</code></li>\r\n</ul></li>\r\n<li><strong>注意</strong>:使用<code>classList</code>属性可以更加方便地操作元素的类列表，实现动态改变样式的效果。这种方法比直接操作<code>style</code>属性更加灵活和强大。</li>\r\n</ul></li>\r\n</ol>\r\n<h4 id=\"dom-事件\">DOM 事件</h4>\r\n<p><strong>onclick</strong>:\r\n绑定点击事件(不一定是绑定button，也可以绑定div)</p>\r\n<p><strong>onmousedown</strong>: 鼠标按下时触发</p>\r\n<p><strong>onmouseup</strong>:\r\n鼠标抬起时触发，完成点击后，再触发onclick事件</p>\r\n<p><strong>onload与onunload</strong>:\r\n在用户进入或者离开页面的时候被触发</p>\r\n<p><strong>onchange</strong>:\r\n常结合对输入字段的验证来使用。比如当改变input内的值的时候触发</p>\r\n<p><strong>onmouseover与onmouseout</strong>: onmouseover 和 onmouseout\r\n事件可用于在用户的鼠标移至 HTML 元素上方或移出元素时触发函数。</p>\r\n<h4 id=\"dom-eventlistener\">DOM EventListener</h4>\r\n<p><strong>addEventListener</strong>：该方法用于向指定元素添加事件监听器。它接受三个参数：要监听的事件类型（如\"click\"）、事件处理函数（当事件发生时执行的函数）以及一个可选的布尔值（用于指定事件是否在捕获阶段触发）。例如：<code>element.addEventListener(\"click\"， function() { /* 代码 */ });</code></p>\r\n<p><strong>removeEventListener</strong>：该方法用于移除先前添加的事件监听器。它同样接受三个参数，与<code>addEventListener</code>相同。移除监听器时，必须提供与添加时完全相同的函数引用，否则无法成功移除。例如：<code>element.removeEventListener(\"click\"， function() { /* 代码 */ });</code>（注意：这里的函数必须与添加时完全一致，包括匿名函数也无法成功移除，因此通常建议使用命名函数）。</p>\r\n<h4 id=\"节点类型与节点关系\">节点类型与节点关系</h4>\r\n<p>在JavaScript中，节点分为多种类型，DOM节点有12种，但常见的有三种:</p>\r\n<p>元素节点:如<code>&lt;html&gt;、&lt;a&gt;、&lt;body&gt;</code>等都是元素节点，即标签。\r\n文本节点:向用户展示的内容，如<code>&lt;title&gt;&lt;/title&gt;</code>中的“文档标题”。\r\n属性节点:元素的属性，如<code>&lt;a&gt;</code>中的href属性。\r\n节点之间的关系主要有父子关系和兄弟关系:</p>\r\n<p>父子关系:</p>\r\n<p>node.parentNode:获得node的父节点。</p>\r\n<p>node.childNodes:获得node的直接子代节点。</p>\r\n<p>node.firstChild:获得node下的第一个子节点。</p>\r\n<p>node.lastChild:获得node下最后一个子节点。</p>\r\n<p>elem.parentElement:返回父元素对象。</p>\r\n<p>elem.children:返回子元素对象集合(IE8支持)。</p>\r\n<p>elem.firstElementChild:返回第一个子元素对象。</p>\r\n<p>elem.lastElementChild:返回最后一个子元素对象。</p>\r\n<p>兄弟关系:</p>\r\n<p>node.previousSibling:返回当前节点的前一个兄弟节点。</p>\r\n<p>node.nextSibling:返回当前节点的下一个兄弟节点。</p>\r\n<p>elem.previousElementSibling:返回当前元素的前一个兄弟元素。</p>\r\n<p>elem.nextElementSibling:返回当前元素的下一个兄弟元素。</p>\r\n<h2 id=\"其他\">04 其他</h2>\r\n<h3 id=\"异步编程基础\">4.1 异步编程基础</h3>\r\n<ul>\r\n<li>回调函数</li>\r\n<li><strong>Promise对象</strong></li>\r\n<li>Promise链式调用与错误处理</li>\r\n</ul>\r\n<h3 id=\"asyncawait\">4.2 async/await</h3>\r\n<ul>\r\n<li>async函数</li>\r\n<li>await表达式</li>\r\n<li>使用try...catch处理异步错误</li>\r\n</ul>\r\n<h3 id=\"其他-1\">4.3 其他</h3>\r\n<ul>\r\n<li>模板字符串</li>\r\n<li>解构赋值</li>\r\n<li>Let与Const</li>\r\n<li>默认参数与剩余参数</li>\r\n<li>模块化(import/export)</li>\r\n<li>ajax</li>\r\n<li>FileReader</li>\r\n</ul>\r\n<p>如果感兴趣，<strong>https://developer.mozilla.org/zh-CN/</strong>\r\n可以在这个文档里查到详细的内容~</p>\r\n","text":"「？」...","permalink":"/post/JSBasic","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[{"name":"Web","slug":"Web","count":2,"path":"api/categories/Web.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":1,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#javascript-%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">01 JavaScript 基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%BC%95%E7%94%A8-javascript\"><span class=\"toc-text\">1.1 如何引用 JavaScript</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%9B%B4%E6%8E%A5%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">直接引用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%96%E8%81%94%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">外联文件</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">1.2 输出方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1.3 变量与数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">变量声明</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">数据类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">类型转换</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">1.4 运算符与表达式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">算术运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">赋值运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">比较运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">逻辑运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">三元运算符(三目运算符)</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">1.6 流程控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#if-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">if 语句</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#switch-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">switch 语句</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#for-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">for 循环</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#while-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">while 循环</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#do...while-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">do...while 循环</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E4%B8%8E%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">02 函数与数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">2.1 函数基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E4%B8%8E%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">函数声明与调用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8E%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">函数表达式与匿名函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%82%E6%95%B0%E4%B8%8E%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">参数与返回值</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">2.2 数组操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">数组创建与访问</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">数组方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%AD%E4%BB%A3%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">迭代方法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E6%97%B6%E5%99%A8\"><span class=\"toc-text\">2.3 定时器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%A5%E6%9C%9F%E4%B8%8E%E6%97%B6%E9%97%B4\"><span class=\"toc-text\">2.4 日期与时间</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5\"><span class=\"toc-text\">2.5 同步与异步</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#dom%E6%93%8D%E4%BD%9C%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86\"><span class=\"toc-text\">03 DOM操作与事件处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dom%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">3.1 DOM基础</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dom%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">3.2 DOM操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#dom-html\"><span class=\"toc-text\">DOM HTML</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#dom-css\"><span class=\"toc-text\">DOM CSS</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#dom-%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">DOM 事件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#dom-eventlistener\"><span class=\"toc-text\">DOM EventListener</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%8A%82%E7%82%B9%E7%B1%BB%E5%9E%8B%E4%B8%8E%E8%8A%82%E7%82%B9%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">节点类型与节点关系</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96\"><span class=\"toc-text\">04 其他</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">4.1 异步编程基础</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#asyncawait\"><span class=\"toc-text\">4.2 async&#x2F;await</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96-1\"><span class=\"toc-text\">4.3 其他</span></a></li></ol></li></ol>","author":{"name":"Heriko Deltana","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/6758fa10d0e0a243d4e19718.jpg","link":"/","description":"世界が終わるまで歌おうぜ","socials":{"github":"https://github.com/HRiver2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/gallery/bilibili-brands.svg","link":"https://space.bilibili.com/507947803"},"Luogu":{"icon":"/gallery/user-solid.svg","link":"https://www.luogu.com.cn/user/407417"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"空奏星鈴观测枢","uid":"3a4d12f635b4534d29232e9e81c998df","slug":"HDSBN","date":"2021-12-10T13:47:04.000Z","updated":"2025-09-10T17:45:02.327Z","comments":true,"path":"api/articles/HDSBN.json","keywords":"HerikoDeltana,HRiver2,","cover":"https://s2.loli.net/2022/07/10/6gkGD9e2tMZYKXw.png","text":"「我们仰望群星，于空中奏响星鈴，静待余音回荡…」...","permalink":"/post/HDSBN","photos":[],"count_time":{"symbolsCount":"69k","symbolsTime":"1:02"},"categories":[{"name":"About Me","slug":"About-Me","count":9,"path":"api/categories/About-Me.json"}],"tags":[{"name":"Me","slug":"Me","count":20,"path":"api/tags/Me.json"}],"author":{"name":"Heriko Deltana","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/6758fa10d0e0a243d4e19718.jpg","link":"/","description":"世界が終わるまで歌おうぜ","socials":{"github":"https://github.com/HRiver2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/gallery/bilibili-brands.svg","link":"https://space.bilibili.com/507947803"},"Luogu":{"icon":"/gallery/user-solid.svg","link":"https://www.luogu.com.cn/user/407417"}}}},"feature":true},"next_post":{"title":"19.5 次回环之日","uid":"b592602e2f944a4f12c78028f72b0805","slug":"19-5th","date":"2025-09-10T17:41:29.000Z","updated":"2025-09-10T18:08:17.561Z","comments":true,"path":"api/articles/19-5th.json","keywords":"HerikoDeltana,HRiver2,","cover":"https://pic1.imgdb.cn/item/67c1efb2d0e0a243d40846c0.jpg","text":"「19.5th，...","permalink":"/post/19-5th","photos":[],"count_time":{"symbolsCount":708,"symbolsTime":"1 mins."},"categories":[{"name":"About Me","slug":"About-Me","count":9,"path":"api/categories/About-Me.json"}],"tags":[{"name":"Me","slug":"Me","count":20,"path":"api/tags/Me.json"}],"author":{"name":"Heriko Deltana","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/6758fa10d0e0a243d4e19718.jpg","link":"/","description":"世界が終わるまで歌おうぜ","socials":{"github":"https://github.com/HRiver2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/gallery/bilibili-brands.svg","link":"https://space.bilibili.com/507947803"},"Luogu":{"icon":"/gallery/user-solid.svg","link":"https://www.luogu.com.cn/user/407417"}}}},"feature":false}}