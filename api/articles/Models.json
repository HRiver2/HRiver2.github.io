{"title":"Models","uid":"fdeb7f511d09c9feab21d131c5bc32c6","slug":"Models","date":"2021-11-19T12:44:48.000Z","updated":"2022-06-06T06:55:03.052Z","comments":true,"path":"api/articles/Models.json","keywords":"HerikoDeltana,HRiver2,","cover":"/gallery/lec.jpg","content":"<p>「模板库」</p>\r\n<span id=\"more\"></span>\r\n<!-- toc -->\r\n<h2 id=\"pre\">「Pre」</h2>\r\n<p><del>临近 CSP-S2 2021\r\n的时候，我决定把板子都打一遍，顺便就把这些板子整理成一个模板库罢</del>。</p>\r\n<p><del>然而 CSP-S2 2021 都爆了我还没整完（</del></p>\r\n<p>现在备战 NOIP2022 了（</p>\r\n<blockquote>\r\n<p>本模板库最新的内容为 2022.5.29 更新，最老内容为 2022.1.23\r\n更新，最近的码风翻新日期为 2022.1.23.</p>\r\n</blockquote>\r\n<p>以下代码若无特殊情况皆可使用的缺省源：</p>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\n\n#define Heriko return\n#define Deltana 0\n#define Romanno 1\n#define S signed\n#define LL long long\n#define DB double\n#define R register\n#define I inline\n#define CI const int\n#define CL const long long\n#define mkp(a,b) make_pair(a,b)\n#define mst(a,b) memset(a,b,sizeof(a))\n#define ON std::ios::sync_with_stdio(false);cin.tie(0)\n#define Files() freopen(\"RNMTQ.in\",\"r\",stdin);freopen(\"RNMTQ.out\",\"w\",stdout)\n\nusing namespace std;\n\ntemplate&lt;typename J&gt;\nI void fr(J &amp;x) {\n    short f(1);\n    x=0;\n    char c(getchar());\n\n    while(c&lt;'0' or c&gt;'9') {\n        if(c=='-')\n            f=-1;\n        \n        c=getchar();\n    }\n\n    while(c&gt;='0' and c&lt;='9') {\n        x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^=48);\n        c=getchar();\n    }\n   \n    x*=f;\n}\n\ntemplate&lt;typename J&gt;\nI void fw(J x,bool k) {\n    if(x&lt;0)\n        x=-x,putchar('-');\n\n    static short stak[35];\n    short top(0);\n\n    do {\n        stak[top++]=x%10;\n        x/=10;\n    }\n    while(x);\n\n    while(top)\n        putchar(stak[--top]+'0');\n\n    k?puts(\"\"):putchar(' ');\n}</code></pre>\r\n<h2 id=\"快速排序\">「快速排序」</h2>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">CI MXX(1e5+1);\n\nint a[MXX];\n\nvoid Mysort(int l,int r) {\n    int i(l),j(r),mid(a[(l+r)&gt;&gt;1]);\n    \n    do {\n        while(a[i]&lt;mid)\n            ++i;\n        \n        while(a[j]&gt;mid)\n            --j;\n\n        if(i&lt;=j)\n            swap(a[i],a[j]),++i,--j;\n    }\n    while(i&lt;=j);\n    \n    if(l&lt;j)\n        Mysort(l,j);\n    \n    if(i&lt;r)\n        Mysort(i,r);\n}\n\nint n;\n\nS main() {\n    fr(n);\n    \n    for(int i(1);i&lt;=n;++i)\n        fr(a[i]);\n\n    Mysort(1,n);\n\n    for(int i(1);i&lt;=n;++i)\n        fw(a[i],0);\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"并查集\">「并查集」</h2>\r\n<blockquote>\r\n<p>仅使用了路径压缩。</p>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">CI MXX(2e5+1),NXX(10001);\n\nint fa[NXX],n,m;\n\nint Find(int x) {\n    if(fa[x]!=x)\n        fa[x]=Find(fa[x]);\n\n    Heriko fa[x];\n}\n\nI void Uni(int x,int y) {\n    int fx(Find(x)),fy(Find(y));\n\n    if(fx!=fy)\n        fa[fx]=fy;\n}\n\nS main() {\n    fr(n),fr(m);\n\n    for(int i(1);i&lt;=n;++i)\n        fa[i]=i;\n\n    for(int i(1);i&lt;=m;++i) {\n        int x,y,z;\n        fr(z),fr(x),fr(y);\n\n        if(z==1)\n            Uni(x,y);\n        else {\n            if(Find(x)==Find(y))\n                puts(\"Y\");\n            else\n                puts(\"N\");\n        }\n    }\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"线性筛\">「线性筛」</h2>\r\n<blockquote>\r\n<p>这里是按照洛谷模板来写的，不过平时用不着询问部分，主要是\r\n<code>Es</code> 函数。</p>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">CI MXX(1e8+1);\n\nint n,prime[MXX],cnt,q;\n\nbool nopr[MXX];\n\nI void Es() {\n    nopr[1]=1;\n\n    for(int i(2);i&lt;=n;++i) {\n        if(!nopr[i])\n            prime[++cnt]=i;\n\n        for(int j(1);j&lt;=cnt and prime[j]*i&lt;=n;++j) {\n            nopr[i*prime[j]]=1;\n\n            if(i%prime[j]==0)\n                break;\n        }\n    }\n}\n\nS main() {\n    fr(n),fr(q);\n    Es();\n\n    while(q--) {\n        int x;\n        fr(x);\n        fw(prime[x],1);\n    }\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"堆\">「堆」</h2>\r\n<blockquote>\r\n<p>一般来说，都直接用 <code>priority_queue</code>.</p>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">priority_queue&lt; int,vector&lt;int&gt;,greater&lt;int&gt; &gt; q;\n\nint n;\n\nS main() {\n    fr(n);\n\n    while(n--) {\n        int opt,x;\n        fr(opt);\n\n        if(opt==1)\n            fr(x),q.push(x);\n        else if(opt==2)\n            fw(q.top(),1);\n        else\n            q.pop();\n    }\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"单调栈\">「单调栈」</h2>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">CI MXX(3e6+1);\n\nint n,a[MXX],f[MXX],stak[MXX],top;\n\nS main() {\n    fr(n);\n\n    for(int i(1);i&lt;=n;++i)\n        fr(a[i]);\n\n    for(int i(n);i&gt;=1;--i) {\n        while(top and a[stak[top]]&lt;=a[i])\n            --top;\n\n        f[i]=top?stak[top]:0;\n        stak[++top]=i;\n    }\n\n    for(int i(1);i&lt;=n;++i)\n        fw(f[i],0);\n    \n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"快速幂\">「快速幂」</h2>\r\n<blockquote>\r\n<p>2021.12.25 更新了那行 <code>x%=p</code>，调了三天 ODT\r\n居然是这里爆了……我从来没写过这，于是加上。</p>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">I LL FstPow(LL x,LL y,LL p) {\n    LL res(1);\n    x%=p;\n\n    while(y) {\n        if(y&amp;1)\n            (res*=x)%=p;\n\n        (x*=x)%=p;\n        y&gt;&gt;=1;\n    }\n\n    Heriko res;\n}</code></pre>\r\n<h2 id=\"单调队列\">「单调队列」</h2>\r\n<blockquote>\r\n<p>第一个循环是求区间最小值，后者则为最大值。</p>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">CI MXX(1e6+1);\n\nint n,k,a[MXX],qmin[MXX],qmax[MXX],hd(1),tl;\n\nS main() {\n    fr(n),fr(k);\n\n    for(int i(1);i&lt;=n;++i)\n        fr(a[i]);\n\n    for(int i(1);i&lt;=n;++i) {\n        while(hd&lt;=tl and a[qmin[tl]]&gt;=a[i])\n            --tl;\n\n        qmin[++tl]=i;\n\n        while(qmin[hd]&lt;=i-k)\n            ++hd;\n\n        if(i&gt;=k)\n            fw(a[qmin[hd]],0);\n    }\n\n    puts(\"\");\n    hd=1,tl=0;\n    \n    for(int i(1);i&lt;=n;++i) {\n        while(hd&lt;=tl and a[qmax[tl]]&lt;=a[i])\n            --tl;\n\n        qmax[++tl]=i;\n\n        while(qmax[hd]&lt;=i-k)\n            ++hd;\n\n        if(i&gt;=k)\n            fw(a[qmax[hd]],0);\n    }\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"最小生成树\">「最小生成树」</h2>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<h3 id=\"prim\">「Prim」</h3>\r\n<blockquote>\r\n<p>因为没写挂了（？）暂时咕了</p>\r\n</blockquote>\r\n<h3 id=\"kruskal\">「Kruskal」</h3>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">CI MXX(2e5+5),NXX(5001);\n\nstruct Node {\n    int x,y,z;\n\n    I bool operator &lt; (const Node &amp;co) const {\n        Heriko z&lt;co.z;\n    }\n}\n\nr[MXX&lt;&lt;1];\n\nint fa[NXX],n,m,ans,k;\n\nint Find(int x) {\n    if(fa[x]!=x)\n        fa[x]=Find(fa[x]);\n\n    Heriko fa[x];\n}\n\nI void Uni(int x,int y,int z) {\n    int fx(Find(x)),fy(Find(y));\n\n    if(fx!=fy) {\n        fa[fx]=fy;\n        ++k;\n        ans+=z;\n    }\n}\n\nS main() {\n    fr(n),fr(m);\n\n    for(int i(1);i&lt;=n;++i)\n        fa[i]=i;\n\n    for(int i(1);i&lt;=m;++i)\n        fr(r[i].x),fr(r[i].y),fr(r[i].z);\n\n    std::sort(r+1,r+1+m);\n\n    for(int i(1);i&lt;=m;++i) {\n        Uni(r[i].x,r[i].y,r[i].z);\n\n        if(k==n-1)\n            break;\n    }\n\n    if(k==n-1)\n        fw(ans,1);\n    else\n        puts(\"orz\");\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"字符串哈希\">「字符串哈希」</h2>\r\n<h3 id=\"单哈希自然溢出\">「单哈希+自然溢出」</h3>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#define LL unsigned long long\n\nconst LL b(211),prime(19260817);\n\nLL h[10015];\n\nchar s[10015];\n\nint n,ans=1;\n\nI LL hso(char x[]) {\n    int lx=strlen(x);\n    LL t=0;\n\n    for(int i=0;i&lt;lx;i++)\n        t=(t*b+(LL)x[i])+prime;\n\n    Heriko t;\n}\nS main() {\n    fr(n);\n\n    for(int i=1;i&lt;=n;i++) {\n        scanf(\"%s\",s);\n        h[i]=hso(s);\n    }\n\n    sort(h+1,h+1+n);\n\n    for(int i=1;i&lt;n;i++)\n        if(h[i]!=h[i+1])\n            ans++;\n\n    fw(ans,1);\n\n    Heriko Deltana;\n}</code></pre>\r\n<h3 id=\"双哈希\">「双哈希」</h3>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">CI MXX(1501),NXX(10005),MOD1(19260817),MOD2(998244353);\n\nint n;\n\nchar s[MXX];\n\nnamespace Hash {\n    #define ULL unsigned long long\n\n    struct Node {\n        ULL h1,h2;\n\n        I bool operator &lt; (const Node &amp;co) const {\n            Heriko (h1==co.h1)?(h2&lt;co.h2):(h1&lt;co.h1);\n        }\n\n        I bool operator != (const Node &amp;co) const {\n            Heriko !((h1==co.h1)&amp;(h2==co.h2));\n        }\n    }\n\n    a[NXX];\n\n    I void GetHash1(int pos,char s[]) {\n        int len(strlen(s));\n        ULL tmp(0);\n\n        for(int i(0);i&lt;len;++i)\n            tmp=(tmp*255+s[i])%MOD1;\n\n        a[pos].h1=tmp;\n    }\n\n    I void GetHash2(int pos,char s[]) {\n        int len(strlen(s));\n        ULL tmp(0);\n\n        for(int i(0);i&lt;len;++i)\n            tmp=(tmp*255+s[i])%MOD2;\n\n        a[pos].h2=tmp;\n    }\n\n    I void GetHash(int pos,char s[]) {\n        GetHash1(pos,s);\n        GetHash2(pos,s);\n    }\n\n    I void Solve() {\n        sort(a+1,a+1+n);\n        int cnt(0);\n\n        for(int i(1);i&lt;=n;++i)\n            if(a[i]!=a[i-1] or i==1)\n                a[++cnt]=a[i];\n\n        fw(cnt,1);\n\n        exit(0);\n    }\n}\n\nS main() {\n    fr(n);\n\n    for(int i(1);i&lt;=n;++i) {\n        scanf(\"%s\",s+1);\n        Hash::GetHash(i,s+1);\n    }\n\n    Hash::Solve();\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"单端最短路\">「单端最短路」</h2>\r\n<h3 id=\"dijkstra\">「Dijkstra」</h3>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">CI MXX(5e5+1),NXX(1e5+1);\n\nstruct node {\n    int nex,to,val;\n}\n\nr[MXX];\n\nint cnt,head[NXX];\n\nI void Add(int x,int y,int z) {\n    r[++cnt]=(node){head[x],y,z};\n    head[x]=cnt;\n}\n\nstruct co {\n    int dis,id;\n\n    I bool operator &lt; (const co &amp;x) const {\n        Heriko x.dis&lt;dis;\n    }\n};\n\npriority_queue&lt;co&gt; q;\n\nint dis[NXX],n,m,s;\n\nbool vis[MXX];\n\nI void Dijkstra() {\n    dis[s]=0;\n    q.push((co){0,s});\n\n    while(q.size()) {\n        int x(q.top().id);\n        q.pop();\n\n        if(vis[x])\n            continue;\n\n        vis[x]=1;\n\n        for(int i(head[x]);i;i=r[i].nex) {\n            int y(r[i].to);\n\n            if(dis[y]&gt;dis[x]+r[i].val) {\n                dis[y]=dis[x]+r[i].val;\n\n                if(!vis[y])\n                    q.push((co){dis[y],y});\n            }\n        }\n    }\n}\n\nS main()\n{\n    fr(n),fr(m),fr(s);\n    mst(dis,0x7f);\n    dis[0]=0;\n\n    for(int i(1);i&lt;=m;++i) {\n        int x,y,z;\n        fr(x),fr(y),fr(z);\n        Add(x,y,z);\n    }\n\n    Dijkstra();\n\n    for(int i(1);i&lt;=n;++i)\n        fw(dis[i],0);\n\n    Heriko Deltana;\n} </code></pre>\r\n<h2 id=\"树状数组\">「树状数组」</h2>\r\n<h3 id=\"单点修改区间询问\">「单点修改区间询问」</h3>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">CI MXX(5e5+1);\n\n#define lowbit(x) (x&amp;(-x))\n\nLL n,t[MXX],a[MXX],m;\n\nI void Modify(int x,int v) {\n    while(x&lt;=n)\n        t[x]+=v,x+=lowbit(x);\n}\n\nI LL Query(int x) {\n    int res(0);\n    \n    while(x)\n        res+=t[x],x-=lowbit(x);\n        \n    Heriko res;\n}\n\nS main() {\n    fr(n),fr(m);\n\n    for(int i(1);i&lt;=n;++i)\n        fr(a[i]);\n\n    for(int i(1);i&lt;=n;++i)\n        Modify(i,a[i]);\n\n    while(m--) {\n        int opt,l,r;\n        fr(opt),fr(l),fr(r);\n\n        if(opt==1)\n            Modify(l,r);\n        else\n            fw(Query(r)-Query(l-1),1);\n    }\n\n    Heriko Deltana;\n}</code></pre>\r\n<h3 id=\"区间修改单点询问\">「区间修改单点询问」</h3>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#define lowbit(x) ((x)&amp;(-x))\n\nCI MXX(5e5+1);\n\nint n,m,t[MXX],a[MXX];\n\nI void Add(int x,int val) {\n    while(x&lt;=n)\n        t[x]+=val,x+=lowbit(x);\n}\n\nI int Query(int x) {\n    int res(0);\n\n    while(x)\n        res+=t[x],x-=lowbit(x);\n\n    Heriko res;\n} \n\nS main() {\n    fr(n),fr(m);\n\n    for(int i(1);i&lt;=n;++i)\n        fr(a[i]);\n\n    for(int i(1);i&lt;=n;++i)\n        Add(i,a[i]-a[i-1]);\n\n    while(m--) {\n        int opt,x,y,z;\n        fr(opt);\n\n        if(opt==1) {\n            fr(x),fr(y),fr(z);\n            Add(x,z);\n            Add(y+1,-z);\n        }\n        else {\n            fr(x);\n            fw(Query(x),1);\n        }\n    }\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"乘法逆元\">「乘法逆元」</h2>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">CI MXX(3e6+1);\n\nLL inv[MXX],n,m;\n\nS main() {\n    fr(n),fr(m);\n    inv[1]=1;\n\n    for(int i(2);i&lt;=n;++i)\n        inv[i]=m-(m/i)*inv[m%i]%m;\n    \n    for(int i(1);i&lt;=n;++i)\n        fw(inv[i],1);\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"高精度\">「高精度」</h2>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">CI MXX(105);\n\nstruct Pic {\n    int num[MXX],sz;\n\n    Pic() {\n        mst(num,0);\n        sz=1;\n    }\n\n    I void Clear() {\n        mst(num,0);\n        sz=1;\n    }\n\n    /*---- int * Pic ----*/\n\n    I Pic operator * (const int &amp;co) const {\n        Pic res;\n        res.sz=sz;\n\n        for(int i(1);i&lt;=sz;++i)\n            res.num[i]=num[i]*co;\n\n        for(int i(1);i&lt;=sz;++i)\n            res.num[i+1]+=(res.num[i]/10),res.num[i]%=10;\n\n        while(res.num[res.sz+1]) {\n            ++res.sz;\n            res.num[res.sz+1]+=(res.num[res.sz]/10);\n            res.num[res.sz]%=10;\n        }\n\n        Heriko res;\n    }\n\n    /*---- Pic * Pic ----*/\n\n    I Pic operator * (const Pic &amp;co) const {\n        Pic res;\n        res.sz=co.sz+sz;\n\n        for(int i(1);i&lt;=sz;++i)\n            for(int j(1);j&lt;=co.sz;++j) {\n                res.num[i+j-1]+=(num[i]*co.num[j]);\n                res.num[i+j]+=(res.num[i+j-1]/10);res.num[i+j-1]%=10;\n            }\n\n        while(!res.num[res.sz] and res.sz&gt;1)\n            --res.sz;\n\n        Heriko res;\n    }\n\n    /*---- Pic + Pic ----*/\n\n    I Pic operator + (const Pic &amp;co) const {\n        Pic res;\n        res.sz=sz+2; \n\n        for(int i(1);i&lt;=sz;++i) {\n            res.num[i]+=num[i]+co.num[i];\n\n            if(res.num[i]&gt;10)\n                ++res.num[i+1],res.num[i]%=10;\n        }\n\n        while(!res.num[res.sz] and res.sz&gt;1)\n            --res.sz;\n\n        Heriko res;\n    }\n\n    /*---- Pic - Pic ----*/\n\n    /*Need to ensure *this &gt; co*/\n\n    I Pic operator - (const Pic &amp;co) const {\n        Pic res;\n        res.sz=sz;\n\n        for(int i(1);i&lt;=sz;++i) {\n            res.num[i]+=num[i]-co.num[i];\n\n            if(res.num[i]&lt;0)\n                --res.num[i+1],res.num[i]+=10;\n        }\n\n        while(!res.num[res.sz] and res.sz&gt;1)\n            --res.sz;\n\n        Heriko res;\n    }\n\n    /*---- Pic&gt;&gt;1 ----*/\n\n    I void RightShift() {\n        for(int i(sz);i;--i) {\n            if(num[i]&amp;1)\n                num[i-1]+=10;\n\n            num[i]&gt;&gt;=1;\n        }\n\n        while(!num[sz] and sz&gt;1)\n            --sz;\n    }\n\n    /*---- Pic &lt; Pic ----*/\n\n    I bool operator &lt; (const Pic &amp;co) const {\n        if(sz!=co.sz)\n            Heriko sz&lt;co.sz;\n\n        for(int i(sz);i;--i)\n            if(num[i]!=co.num[i])\n                Heriko num[i]&lt;co.num[i];\n\n        Heriko Deltana;\n    }\n\n    /*---- Pic &gt; Pic ----*/\n\n    I bool operator &gt; (const Pic &amp;co) const {\n        if(sz!=co.sz)\n            Heriko sz&gt;co.sz;\n\n        for(int i(sz);i;--i)\n            if(num[i]!=co.num[i])\n                Heriko num[i]&gt;co.num[i];\n\n        Heriko Deltana;\n    }\n\n    /*---- Pic &lt;= Pic ----*/\n\n    I bool operator &lt;= (const Pic &amp;co) const {\n        Heriko !((*this)&gt;co);\n    }\n\n    /*---- Pic &gt;= Pic ----*/\n\n    I bool operator &gt;= (const Pic &amp;co) const {\n        Heriko !((*this)&lt;co);\n    }\n\n    /*---- Pic == Pic ----*/\n\n    I bool operator == (const Pic &amp;co) const {\n        Heriko (!((*this)&gt;co))&amp;(!((*this)&lt;co));\n    }\n\n    /*---- Pic Input (char[] -&gt; Pic) ----*/\n\n    I void Into(char s[]) {\n        sz=strlen(s+1);\n\n        for(int i(1);i&lt;=sz;++i)\n            num[i]=s[sz-i+1]-'0';\n    }\n\n    /*---- Pic == 0 ? ----*/\n\n    I bool Zero() {\n        Heriko (sz==1)&amp;(num[1]==0);\n    }\n\n    /*---- Pic Output ----*/\n\n    I void fw() {\n        for(int i(sz);i;--i)\n            putchar(num[i]+'0'); putchar(' ');\n    }\n}\n\nn,m;</code></pre>\r\n<h2 id=\"线段树\">「线段树」</h2>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n<p>这里只放了个区间加和区间改，其它东西改一改就有了。</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">template&lt;typename J&gt;\nI J Hmax(const J &amp;x,const J &amp;y) {\n    Heriko x&gt;y?x:y;\n}\n\nconst LL MXX(1e6+1),INF(1e12);\n\nint n,q;\n\nstruct Node {\n    int l,r;LL mx,tg1,tg2;\n}\n\nt[MXX&lt;&lt;2];\n\nI void Pushup(int x) {\n    t[x].mx=Hmax(t[lc(x)].mx,t[rc(x)].mx);\n}\n\nI void Pushdown(int x) {\n    if(t[x].tg2!=INF) {\n        t[lc(x)].tg1=0;\n        t[lc(x)].tg2=t[x].tg2;\n        t[lc(x)].mx=t[x].tg2;\n        t[rc(x)].tg1=0;\n        t[rc(x)].tg2=t[x].tg2;\n        t[rc(x)].mx=t[x].tg2;\n        t[x].tg2=INF;\n    }\n\n    if(t[x].tg1) {\n        t[lc(x)].tg1+=t[x].tg1;\n        t[lc(x)].mx+=t[x].tg1;\n        t[rc(x)].tg1+=t[x].tg1;\n        t[rc(x)].mx+=t[x].tg1;\n        t[x].tg1=0;\n    }\n}\n\nvoid Build(int x,int l,int r) {\n    t[x].l=l,t[x].r=r;\n    t[x].mx=t[x].tg1=0;\n    t[x].tg2=INF;\n\n    if(l==r) {\n        fr(t[x].mx);\n\n        Heriko;\n    }\n\n    int mid((l+r)&gt;&gt;1);\n    Build(lc(x),l,mid);\n    Build(rc(x),mid+1,r);\n    Pushup(x);\n}\n\nvoid ModifyAdd(int x,int lx,int rx,LL v) {\n    if(lx&lt;=t[x].l and t[x].r&lt;=rx) {\n        t[x].tg1+=v;t[x].mx+=v;\n\n        Heriko;\n    }\n\n    Pushdown(x);\n    int mid((t[x].l+t[x].r)&gt;&gt;1);\n\n    if(lx&lt;=mid)\n        ModifyAdd(lc(x),lx,rx,v);\n    \n    if(rx&gt;mid)\n        ModifyAdd(rc(x),lx,rx,v);\n\n    Pushup(x);\n}\n\nvoid ModifyChange(int x,int lx,int rx,LL v) {\n    if(lx&lt;=t[x].l and t[x].r&lt;=rx) {\n        t[x].tg1=0;t[x].tg2=v;t[x].mx=v;\n\n        Heriko;\n    }\n\n    Pushdown(x);\n    int mid((t[x].l+t[x].r)&gt;&gt;1);\n\n    if(lx&lt;=mid)\n        ModifyChange(lc(x),lx,rx,v);\n    \n    if(rx&gt;mid)\n        ModifyChange(rc(x),lx,rx,v);\n\n    Pushup(x);\n}\n\nLL Query(int x,int lx,int rx) {\n    if(lx&lt;=t[x].l and t[x].r&lt;=rx)\n        Heriko t[x].mx;\n\n    LL res(-INF);\n    int mid((t[x].l+t[x].r)&gt;&gt;1);\n    Pushdown(x);\n\n    if(lx&lt;=mid)\n        res=Hmax(Query(lc(x),lx,rx),res);\n    \n    if(rx&gt;mid)\n        res=Hmax(Query(rc(x),lx,rx),res);\n\n    Heriko res;\n}\n\nS main() {\n    fr(n),fr(q);\n    Build(1,1,n);\n\n    while(q--) {\n        int opt,l,r;LL x;\n        fr(opt),fr(l),fr(r);\n\n        if(opt==1)\n            fr(x),ModifyChange(1,l,r,x);\n        else if(opt==2)\n            fr(x),ModifyAdd(1,l,r,x);\n        else\n            fw(Query(1,l,r),1);\n    }\n    \n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"主席树\">「主席树」</h2>\r\n<blockquote>\r\n<p>UPD 2022.2.20</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">CI MXX(1e5+1);\n\nint n,q,lc[MXX&lt;&lt;5],rc[MXX&lt;&lt;5],sum[MXX&lt;&lt;5],t[MXX],a[MXX],b[MXX],id;\n\nint Build(int l,int r) {\n    int x(++id),mid((l+r)&gt;&gt;1);\n\n    if(l&lt;r) {\n        lc[x]=Build(l,mid);\n        rc[x]=Build(mid+1,r);\n    }\n\n    Heriko x;\n}\n\nint Insert(int pre,int l,int r,int v) {\n    int x(++id),mid((l+r)&gt;&gt;1);\n    lc[x]=lc[pre],rc[x]=rc[pre],sum[x]=sum[pre]+1;\n\n    if(l&lt;r) {\n        if(v&lt;=mid)\n            lc[x]=Insert(lc[pre],l,mid,v);\n        else\n            rc[x]=Insert(rc[pre],mid+1,r,v);\n    }\n\n    Heriko x;\n}\n\nint Query(int x,int y,int l,int r,int v) {\n    if(l&gt;=r)\n        Heriko l;\n\n    int nw(sum[lc[y]]-sum[lc[x]]),mid((l+r)&gt;&gt;1);\n\n    if(nw&gt;=v)\n        Heriko Query(lc[x],lc[y],l,mid,v);\n    else\n        Heriko Query(rc[x],rc[y],mid+1,r,v-nw);\n}\n\nS main() {\n    fr(n),fr(q);\n\n    for(int i(1);i&lt;=n;++i)\n        fr(a[i]),b[i]=a[i];\n\n    sort(b+1,b+1+n);\n    int nl(unique(b+1,b+1+n)-b-1);\n\n    for(int i(1);i&lt;=n;++i)\n        a[i]=lower_bound(b+1,b+1+nl,a[i])-b;\n\n    t[0]=Build(1,nl);\n\n    for(int i(1);i&lt;=n;++i)\n        t[i]=Insert(t[i-1],1,nl,a[i]);\n\n    while(q--) {\n        int l,r,k;\n        fr(l),fr(r),fr(k);\n        fw(b[Query(t[l-1],t[r],1,nl,r-l+1-k+1)],1);//求区间第 K 大\n        fw(b[Query(t[l-1],t[r],1,nl,k)],1);//求区间第 K 小\n    }\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"st表\">「ST表」</h2>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">\ntemplate&lt;typename J&gt;\nI J Hmax(const J &amp;x,const J &amp;y) {\n    Heriko x&gt;y?x:y;\n}\n\nCI MXX(1e5+1);\n\nLL a[MXX][22];\n\nint n,m;\n\nI LL Query(int l,int r) {\n    int tmp(std::log2(r-l+1));\n\n    Heriko Hmax(a[l][tmp],a[r-(1&lt;&lt;tmp)+1][tmp]);\n}\n\nS main() {\n    fr(n),fr(m);\n\n    for(int i(1);i&lt;=n;++i)\n        fr(a[i][0]);\n\n    for(int lg(1);lg&lt;=21;++lg)\n        for(int i(1);i+(1&lt;&lt;lg)-1&lt;=n;++i)\n            a[i][lg]=Hmax(a[i][lg-1],a[i+(1&lt;&lt;(lg-1))][lg-1]);\n\n    for(int i(1);i&lt;=m;++i) {\n        int l,r;\n        fr(l),fr(r);\n        fw(Query(l,r),1);\n    }\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"三分法\">「三分法」</h2>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">template&lt;typename J&gt;\nI J Habs(const J &amp;x) {\n    Heriko x&lt;0?-x:x;\n}\n\nconst double EPS(1e-7);\n\nCI MXX(15);\n\nint n;\n\ndouble a[MXX],l,r;\n\ndouble Solve(double x) {\n    double res(0);\n\n    for(int i(n);i&gt;=0;--i)\n        res*=x,res+=a[i];\n\n    Heriko res;\n}\n\nS main() {\n    fr(n);\n    scanf(\"%lf%lf\",&amp;l,&amp;r);\n\n    for(int i(n);i&gt;=0;--i)\n        scanf(\"%lf\",&amp;a[i]);\n\n    while(Habs(r-l)&gt;=EPS) {\n        double mid((l+r)/2);\n\n        if(Solve(mid+EPS)&gt;Solve(mid-EPS))\n            l=mid;\n        else\n            r=mid;\n    }\n\n    printf(\"%.5lf\\n\",r);\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"kmp\">「KMP」</h2>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">CI MXX(1e6+1);\n\nint lena,lenb,nex[MXX],kmp[MXX];\n\nchar a[MXX],b[MXX];\n\nS main() {\n    scanf(\"%s%s\",a+1,b+1);\n    lena=strlen(a+1),lenb=strlen(b+1);\n\n    for(int i(2),j(0);i&lt;=lenb;++i) {\n        while(j&gt;0 and b[i]!=b[j+1])\n            j=nex[j];\n\n        if(b[i]==b[j+1])\n            ++j;\n\n        nex[i]=j;\n    }\n\n    for(int i(1),j(0);i&lt;=lena;++i) {\n        while(j&gt;0 and a[i]!=b[j+1])\n            j=nex[j];\n\n        if(a[i]==b[j+1])\n            ++j;\n\n        kmp[i]=j;\n    }\n\n    for(int i(1);i&lt;=lena;++i)\n        if(kmp[i]==lenb)\n            fw(i-lenb+1,1);\n\n    for(int i(1);i&lt;=lenb;++i)\n        fw(nex[i],0);\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"lca\">「LCA」</h2>\r\n<h3 id=\"倍增\">「倍增」</h3>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">CI MXX(5e5+1);\n\nint n,m,rt;\n\nstruct Node {\n    int nex,to;\n}\n\nr[MXX&lt;&lt;1];\n\nint cnt,head[MXX];\n\nI void Add(int x,int y) {\n    r[++cnt]=(Node){head[x],y};head[x]=cnt;\n    r[++cnt]=(Node){head[y],x};head[y]=cnt;\n}\n\nint dep[MXX],f[MXX][35],lg[MXX];\n\nI void PreLog() {\n    for(int i(1);i&lt;=n;++i)\n        lg[i]=lg[i-1]+((1&lt;&lt;lg[i-1])==i);\n}\n\nvoid DFS(int x,int fa) {\n    f[x][0]=fa;\n    dep[x]=dep[fa]+1;\n    \n    for(int i(1);i&lt;=lg[dep[x]];++i)\n        f[x][i]=f[f[x][i-1]][i-1];\n        \n    for(int i(head[x]);i;i=r[i].nex)\n        if(r[i].to!=fa)\n            DFS(r[i].to,x);\n}\n\nI int LCA(int x,int y) {\n    if(dep[x]&lt;dep[y])\n        swap(x,y);\n    \n    while(dep[x]&gt;dep[y])\n        x=f[x][lg[dep[x]-dep[y]]-1];\n        \n    if(x==y)\n        Heriko x;\n        \n    for(int i(lg[dep[x]]-1);i&gt;=0;--i)\n        if(f[x][i]!=f[y][i])\n            x=f[x][i],y=f[y][i];\n            \n    Heriko f[x][0];\n}\n\nS main() {\n    fr(n),fr(m),fr(rt);\n    \n    for(int i(1);i&lt;n;++i) {\n        int x,y;\n        fr(x),fr(y);\n        Add(x,y);\n    }\n    \n    PreLog();\n    DFS(rt,0);\n    \n    for(int i(1);i&lt;=m;++i) {\n        int x,y;\n        fr(x),fr(y);\n        fw(LCA(x,y),1);\n    }\n\n    Heriko Deltana;\n}</code></pre>\r\n<h3 id=\"树剖\">「树剖」</h3>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">CI MXX(500001);\n\nstruct Node {\n    int nex,to;\n}\n\nr[MXX&lt;&lt;1];\n\nint rcnt,head[MXX];\n\nI void Add(int x,int y) {\n    r[++rcnt]=(Node){head[x],y},head[x]=rcnt;\n    r[++rcnt]=(Node){head[y],x},head[y]=rcnt;\n}\n\nint sz[MXX],son[MXX],top[MXX],fa[MXX],dep[MXX];\n\nvoid DFS1(int x,int fath) {\n    sz[x]=1,fa[x]=fath,dep[x]=dep[fath]+1;\n\n    for(int i(head[x]);i;i=r[i].nex) {\n        int y(r[i].to);\n\n        if(y==fath)\n            continue;\n\n        DFS1(y,x);\n        sz[x]+=sz[y];\n\n        if(!son[x] or sz[son[x]]&lt;sz[y])\n            son[x]=y;\n    }\n}\n\nvoid DFS2(int x,int nw) {\n    top[x]=nw;\n\n    if(son[x])\n        DFS2(son[x],nw);\n\n    for(int i(head[x]);i;i=r[i].nex) {\n        int y(r[i].to);\n\n        if(y==fa[x] or y==son[x])\n            continue;\n\n        DFS2(y,y);\n    }\n}\n\nint n,m,s;\n\nS main() {\n    // Files();\n\n    fr(n),fr(m),fr(s);\n\n    for(int i(1);i&lt;n;++i) {\n        int x,y;\n        fr(x),fr(y);\n        Add(x,y);\n    }\n\n    DFS1(s,0);\n    DFS2(s,s);\n\n    for(int i(1);i&lt;=m;++i) {\n        int x,y;\n        fr(x),fr(y);\n\n        while(top[x]!=top[y]) {\n            if(dep[top[x]]&gt;=dep[top[y]])\n                x=fa[top[x]];\n            else\n                y=fa[top[y]];\n        }\n\n        fw((dep[x]&lt;dep[y])?x:y,1);\n    }\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"矩阵加速\">「矩阵加速」</h2>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">CI MOD(1e9+7);\n\nint n,T;\n\nstruct Matrix {\n    LL a[5][5];\n\n    Matrix() {\n        mst(a,0);\n    }\n\n    I void BuildB() {\n        mst(a,0);\n        a[1][1]=a[1][3]=a[2][1]=a[3][2]=1;\n    }\n\n    I void BuildA() {\n        mst(a,0);\n        a[1][1]=a[2][1]=a[3][1]=1;\n    }\n\n    I Matrix operator * (const Matrix &amp;co) const {\n        Matrix res;\n\n        for(int k(1);k&lt;=3;++k)\n            for(int i(1);i&lt;=3;++i)\n                for(int j(1);j&lt;=3;++j)\n                    (res.a[i][j]+=(a[i][k]*co.a[k][j])%MOD)%=MOD;\n\n        Heriko res;\n    }\n}\n\nA,B;\n\nI void MatrixFstPow(int x) {\n    while(x) {\n        if(x&amp;1)\n            A=A*B;\n\n        B=B*B;\n        x&gt;&gt;=1;\n    }\n}\n\nS main() {\n    fr(T);\n\n    while(T--) {\n        fr(n);\n\n        if(n&lt;=3)\n            puts(\"1\");\n        else {\n            A.BuildA(),B.BuildB();\n            MatrixFstPow(n-1);\n            fw((A.a[1][1]+MOD)%MOD,1);\n        }\n    }\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"spfa判负环\">「SPFA判负环」</h2>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">CI MXX(3001),INF(0x3f3f3f3f);\n\nint n,m,T;\n\nstruct Node {\n    int nex,to,val;\n}\n\nr[MXX&lt;&lt;1];\n\nint cnt,head[MXX];\n\nI void Add(int x,int y,int z) {\n    r[++cnt]=(Node){head[x],y,z};\n    head[x]=cnt;\n}\n\nint co[MXX],dis[MXX];\n\nbitset&lt;MXX&gt; vis;\n\nI bool SPFA(int s) {\n    queue&lt;int&gt; q;\n    q.push(s);\n    dis[s]=0,vis[s]=1,++co[s];\n\n    while(q.size()) {\n        int x(q.front());\n        q.pop();\n        vis[x]=0;\n\n        for(int i(head[x]);i;i=r[i].nex) {\n            int y(r[i].to);\n\n            if(dis[y]&gt;dis[x]+r[i].val) {\n                dis[y]=dis[x]+r[i].val;\n\n                if(!vis[y]) {\n                    vis[y]=1;\n                    q.push(y);\n                    ++co[y];\n\n                    if(co[y]&gt;n)\n                        Heriko Deltana;\n                }\n            }\n        }\n    }\n\n    Heriko Romanno;\n}\n\nS main() {\n    Files();\n\n    fr(T);\n    \n    while(T--) {\n        fr(n),fr(m);\n        cnt=0,vis=0;\n        mst(dis,0x3f),mst(co,0),mst(head,0);\n\n        for(int i(1);i&lt;=m;++i) {\n            int x,y,z;\n            fr(x),fr(y),fr(z);\n\n            if(z&gt;=0)\n                Add(x,y,z),Add(y,x,z);\n            else\n                Add(x,y,z);\n        }\n\n        if(!SPFA(1))\n            puts(\"YES\");\n        else\n            puts(\"NO\");\n    }\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"矩阵快速幂\">「矩阵快速幂」</h2>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">CI NXX(101),MXX(21),MOD(1e9+7);\n\nstruct Matrix {\n    int n,m,a[MXX][MXX];\n\n    Matrix() {\n        n=m=0,mst(a,0);\n    }\n\n    I void Build() {\n        for(int i(1);i&lt;=m;++i)\n            a[i][i]=1;\n    }\n\n    I Matrix operator * (const Matrix &amp;co) const {\n        Matrix res;\n        res.n=n,res.m=co.m;\n\n        for(int i(1);i&lt;=n;++i)\n            for(int k(1);k&lt;=m;++k)\n                for(int j(1);j&lt;=co.m;++j)\n                    (res.a[i][j]+=(1ll*a[i][k]*co.a[k][j])%MOD)%=MOD;\n\n        Heriko res;\n    }\n}\n\nans;\n\nint n,m;\n\nI Matrix MFP(Matrix x,int y) {\n    Matrix res;\n    res.n=res.m=m;\n    res.Build();\n\n    while(y) {\n        if(y&amp;1)\n            res=res*x;\n\n        x=x*x;\n        y&gt;&gt;=1;\n    }\n\n    Heriko res;\n}</code></pre>\r\n<h2 id=\"ac自动机\">「AC自动机」</h2>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">CI MXX(1e6+5);\n\nstruct ACAM {\n    int c[MXX][26],val[MXX],fail[MXX],cnt;\n    queue&lt;int&gt; q;\n\n    I void Insert(char s[]) {\n        int len(strlen(s)),nw(0);\n\n        for(int i(0);i&lt;len;++i) {\n            int v(s[i]-'a');\n\n            if(!c[nw][v])\n                c[nw][v]=++cnt;\n\n            nw=c[nw][v];\n        }\n\n        ++val[nw];\n    }\n\n    I void Build() {\n        for(int i(0);i&lt;26;++i)\n            if(c[0][i])\n                fail[c[0][i]]=0,q.push(c[0][i]);\n\n        while(q.size()) {\n            int x(q.front());\n            q.pop();\n\n            for(int i(0);i&lt;26;++i)\n                if(c[x][i])\n                    fail[c[x][i]]=c[fail[x]][i],q.push(c[x][i]);\n                else\n                    c[x][i]=c[fail[x]][i];\n        }\n    }\n\n    I int Query(char s[]) {\n        int len(strlen(s)),nw(0),res(0);\n\n        for(int i(0);i&lt;len;++i) {\n            nw=c[nw][s[i]-'a'];\n\n            for(int j(nw);j and ~val[j];j=fail[j])\n                res+=val[j],val[j]=-1;\n        }\n\n        Heriko res;\n    }\n}\n\nAC;\n\nint n;\n\nchar s[MXX];\n\nS main() {\n    Files();\n\n    fr(n);\n\n    for(int i(1);i&lt;=n;++i)\n        scanf(\"%s\",s),AC.Insert(s);\n\n    AC.Build();\n\n    scanf(\"%s\",s);\n    fw(AC.Query(s),1);\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"差分约束\">「差分约束」</h2>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">CI MXX(5e3+5),INF(0x3f3f3f3f);\n\nint n,m,T;\n\nstruct Node {\n    int nex,to,val;\n}\n\nr[MXX&lt;&lt;1];\n\nint cnt,head[MXX];\n\nI void Add(int x,int y,int z) {\n    r[++cnt]=(Node){head[x],y,z};\n    head[x]=cnt;\n}\n\nint co[MXX],dis[MXX];\n\nbitset&lt;MXX&gt; vis;\n\nI bool SPFA(int s) {\n    queue&lt;int&gt; q;\n    q.push(s);\n    mst(dis,0x3f);\n    dis[s]=0,vis[s]=1,++co[s];\n\n    while(q.size()) {\n        int x(q.front());\n        q.pop();\n        vis[x]=0;\n\n        for(int i(head[x]);i;i=r[i].nex) {\n            int y(r[i].to);\n\n            if(dis[y]&gt;dis[x]+r[i].val) {\n                dis[y]=dis[x]+r[i].val;\n\n                if(!vis[y]) {\n                    vis[y]=1;\n                    q.push(y);\n                    ++co[y];\n\n                    if(co[y]&gt;=n+1)\n                        Heriko Deltana;\n                }\n            }\n        }\n    }\n\n    Heriko Romanno;\n}\n\nS main() {\n    Files();\n\n    fr(n),fr(m);\n\n    for(int i(1);i&lt;=n;++i)\n        Add(0,i,0);\n\n    for(int i(1);i&lt;=m;++i) {\n        int x,y,z;\n        fr(x),fr(y),fr(z);\n        Add(y,x,z);\n    }\n\n    if(!SPFA(0))\n        puts(\"NO\");\n    else\n        for(int i(1);i&lt;=n;++i)\n            fw(dis[i],0);\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"欧拉路径\">「欧拉路径」</h2>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n<p>调了 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.023ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.127ex\" height=\"1.434ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -624 3150 634\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"1D7F7\" d=\"M99 461Q99 470 99 474T104 487T120 498T151 502Q213 517 251 596Q264 622 283 622Q308 622 319 597V76H373H401Q428 76 439 69T450 38Q450 11 428 1H127Q104 10 104 38Q104 62 115 69T153 76H181H235V269Q235 461 234 461Q184 426 137 424H133Q124 424 119 425T109 431T99 447V461Z\"></path><path data-c=\"1D7F7\" d=\"M99 461Q99 470 99 474T104 487T120 498T151 502Q213 517 251 596Q264 622 283 622Q308 622 319 597V76H373H401Q428 76 439 69T450 38Q450 11 428 1H127Q104 10 104 38Q104 62 115 69T153 76H181H235V269Q235 461 234 461Q184 426 137 424H133Q124 424 119 425T109 431T99 447V461Z\" transform=\"translate(525,0)\"></path><path data-c=\"1D7FA\" d=\"M235 1Q213 10 213 32V38V46Q213 65 230 73Q236 76 274 76H314V168H183L52 169Q37 175 33 182T29 205V218L30 244Q53 283 155 443T264 613Q276 623 298 623H323H363Q378 616 385 601V244H429H450Q474 244 484 237T495 206Q495 179 477 171Q471 168 429 168H385V76H425H442Q466 76 476 69T487 38Q487 10 465 1H235ZM314 244V554L117 245L215 244H314Z\" transform=\"translate(1050,0)\"></path><path data-c=\"1D7FB\" d=\"M387 189Q387 244 354 278T273 313Q230 313 205 301T163 271T138 249H120Q102 249 97 251Q85 258 83 266T80 311Q80 320 80 359T81 430Q81 587 82 591Q88 605 103 610H108Q112 610 120 610T138 610T163 610T192 611T225 611T260 611H415Q416 610 421 607T428 602T432 596T436 587T437 573Q437 567 437 562T434 554T431 548T427 543T423 540T418 538L415 536L289 535H164V363L170 366Q175 368 184 372T207 380T238 386T276 389Q357 389 414 331T472 187Q472 116 412 53T245 -10Q218 -10 209 -9Q126 5 89 48T52 137Q52 164 68 177T104 191Q130 191 143 175T156 141Q156 132 154 125T149 113T146 107Q146 104 155 95T188 76T245 65Q298 65 342 98T387 189Z\" transform=\"translate(1575,0)\"></path><path data-c=\"1D7F7\" d=\"M99 461Q99 470 99 474T104 487T120 498T151 502Q213 517 251 596Q264 622 283 622Q308 622 319 597V76H373H401Q428 76 439 69T450 38Q450 11 428 1H127Q104 10 104 38Q104 62 115 69T153 76H181H235V269Q235 461 234 461Q184 426 137 424H133Q124 424 119 425T109 431T99 447V461Z\" transform=\"translate(2100,0)\"></path><path data-c=\"1D7FA\" d=\"M235 1Q213 10 213 32V38V46Q213 65 230 73Q236 76 274 76H314V168H183L52 169Q37 175 33 182T29 205V218L30 244Q53 283 155 443T264 613Q276 623 298 623H323H363Q378 616 385 601V244H429H450Q474 244 484 237T495 206Q495 179 477 171Q471 168 429 168H385V76H425H442Q466 76 476 69T487 38Q487 10 465 1H235ZM314 244V554L117 245L215 244H314Z\" transform=\"translate(2625,0)\"></path></g></g></g></svg></mjx-container></span>\r\n年，结果是答案栈开小了。</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">template&lt;typename J&gt;\nI J Hmax(const J &amp;x,const J &amp;y) {\n    Heriko x&gt;y?x:y;\n}\n\nCI MXX(1e5+5);\n\nint n,m,into[MXX],outo[MXX],lst[MXX],ans[MXX&lt;&lt;1],s,t,cnt;\n\nvector&lt; pair&lt;int,int&gt; &gt; r[MXX];\n\nbitset&lt;(MXX&lt;&lt;1)&gt; vis;\n\nvoid DFS(int x) {\n    for(int i(lst[x]);i&lt;(int)r[x].size();i=Hmax(i+1,lst[x])) {\n        int y(r[x][i].first),id(r[x][i].second);\n\n        if(!vis[id]) {\n            vis[id]=1;\n            lst[x]=i+1;\n            DFS(y);\n        }\n    }\n\n    ans[++cnt]=x;\n}\n\nS main() {\n    Files();\n\n    fr(n),fr(m);\n\n    for(int i(1);i&lt;=m;++i) {\n        int x,y;\n        fr(x),fr(y);\n        ++outo[x],++into[y];\n        r[x].push_back(mkp(y,i));\n    }\n\n    int tot(0);\n    \n    for(int i(1);i&lt;=n;++i)\n        if(into[i]!=outo[i]) {\n            ++tot;\n\n            if(into[i]==outo[i]-1)\n                s=i;\n            if(into[i]==outo[i]+1)\n                t=i;\n        }\n\n    if(tot!=0 and tot!=2) {\n        puts(\"No\");\n\n        Heriko Deltana;\n    }\n\n    if(!tot)\n        s=t=1;\n    \n    if(!s or !t) {\n        puts(\"No\");\n\n        Heriko Deltana;\n    }\n\n    for(int i(1);i&lt;=n;++i)\n        sort(r[i].begin(),r[i].end());\n\n    DFS(s);\n\n    for(int i(cnt);i;--i)\n        fw(ans[i],0);\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"康托展开\">「康托展开」</h2>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#define lowbit(x) ((x)&amp;(-x))\n\nCI MXX(1e6+1),MOD(998244353);\n\nint n;\n\nLL t[MXX];\n\nI void Add(int x,LL v) {\n    while(x&lt;=n)\n        t[x]+=v,x+=lowbit(x);\n}\n\nI LL Query(int x) {\n    LL res(0);\n\n    while(x)\n        res+=t[x],x-=lowbit(x);\n\n    Heriko res;\n}\n\nLL pw[MXX],ans;\n\nS main() {\n    Files();\n\n    fr(n);\n\n    for(int i(1);i&lt;=n;++i)\n        Add(i,1);\n\n    pw[0]=1;\n\n    for(int i(1);i&lt;=n;++i)\n        pw[i]=(pw[i-1]*i)%MOD;\n\n    for(int i(1);i&lt;=n;++i) {\n        int x;\n        fr(x);\n        (ans+=((Query(x)-1)*pw[n-i])%MOD)%=MOD;\n        Add(x,-1);\n    }\n\n    fw(ans+1,1);\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"威佐夫博弈\">「威佐夫博弈」</h2>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n<p>结论：若两堆物品的初始值为 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.11ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2700.7 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(389,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(989,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1433.7,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2311.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span>，且 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.09ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.361ex\" height=\"1.312ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -540 2811.6 580\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1155.8,0)\"><path data-c=\"3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2211.6,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container></span>，则使 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"10.808ex\" height=\"1.505ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -583 4777 665\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D467\" d=\"M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(742.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1798.6,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2620.8,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3621,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4499,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g></g></g></svg></mjx-container></span></p>\r\n<p>记 <code>x=(LL)(((sqrt(5.0)+1.0)/2.0)*w);</code></p>\r\n<p>若 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.298ex\" height=\"1.505ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -583 2783.6 665\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1155.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2211.6,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g></g></g></svg></mjx-container></span>，则先手必败，否则先手必胜。</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">LL n,m,w,x;\n\nS main() {\n    Files();\n\n    fr(n),fr(m);\n\n    if(n&lt;m)\n        swap(n,m);\n\n    w=n-m;\n    x=(LL)(((sqrt(5.0)+1.0)/2.0)*w);\n\n    if(x==m)\n        puts(\"0\");\n    else\n        puts(\"1\");\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"莫队\">「莫队」</h2>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">CI MXX(5e4+1);\n\nint n,m,k,a[MXX],sqn;\n\nLL ans[MXX],co[MXX],cnt;\n\nstruct Node {\n    int l,r,id;\n\n    I bool operator &lt; (const Node &amp;co) const {\n        if(l/sqn!=co.l/sqn)\n            Heriko l&lt;co.l;\n\n        if((l/sqn)&amp;1)\n            Heriko r&lt;co.r;\n\n        Heriko r&gt;co.r;\n    }\n}\n\nq[MXX];\n\nI void Add(int x) {\n    \n}\n\nI void Del(int x) {\n    \n}\n\nS main() {\n    Files();\n\n    fr(n),fr(m),fr(k),sqn=sqrt(n);\n\n    for(int i(1);i&lt;=n;++i)\n        fr(a[i]);\n\n    for(int i(1);i&lt;=m;++i)\n        fr(q[i].l),fr(q[i].r),q[i].id=i;\n\n    sort(q+1,q+1+m);\n\n    int lx(1),rx(0);\n\n    for(int i(1);i&lt;=m;++i) {\n        while(lx&lt;q[i].l)\n            Del(a[lx++]);\n\n        while(lx&gt;q[i].l)\n            Add(a[--lx]);\n\n        while(rx&lt;q[i].r)\n            Add(a[++rx]);\n\n        while(rx&gt;q[i].r)\n            Del(a[rx--]);\n\n        ans[q[i].id]=cnt;\n    }\n\n    for(int i(1);i&lt;=m;++i)\n        fw(ans[i],1);\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"vector-存图遍历模板\">「vector 存图遍历模板」</h2>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">CI MXX(1e6+1),NXX(1e5+1);\n\nbitset&lt;NXX&gt; vis;\n\nvector&lt;int&gt; r[NXX];\n\nint n,m;\n\nvoid DFS(int x) {\n    fw(x,0);\n    vis[x]=1;\n    int sz(r[x].size());\n\n    for(int i(0);i&lt;sz;++i)\n        if(!vis[r[x][i]])\n            DFS(r[x][i]);\n}\n\nI void BFS() {\n    queue&lt;int&gt; q;\n    q.push(1),vis[1]=1;\n\n    while(q.size()) {\n        int y(q.front());\n        q.pop();\n        fw(y,0);\n        int sz(r[y].size());\n\n        for(int i(0);i&lt;sz;++i)\n            if(!vis[r[y][i]])\n                q.push(r[y][i]),vis[r[y][i]]=1;\n    }\n}\n\nS main() {\n    Files();\n\n    fr(n),fr(m);\n\n    for(int i(1);i&lt;=m;++i) {\n        int x,y;\n        fr(x),fr(y);\n        r[x].push_back(y);\n    }\n\n    for(int i(1);i&lt;=n;++i)\n        std::sort(r[i].begin(),r[i].end());\n\n    DFS(1),puts(\"\");\n    vis=0;\n    BFS(),puts(\"\");\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"dinic\">「Dinic」</h2>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">template &lt;typename J&gt;\nI J Hmin(const J &amp;x,const J &amp;y) {\n    Heriko x&lt;y?x:y;\n}\n\nCI MXX(5001),NXX(201),INF(998244353);\n\nstruct Node {\n    int nex,to;\n    LL val;\n}\n\nr[MXX&lt;&lt;1];\n\nint cnt(1),head[NXX],now[NXX],n,m,s,t;\n\nI void Add(int x,int y,LL z) {\n    r[++cnt]=(Node){head[x],y,z},head[x]=cnt;\n    r[++cnt]=(Node){head[y],x,0},head[y]=cnt;\n}\n\nLL dis[NXX],ans;\n\nbitset&lt;NXX&gt; vis;\n\nI bool BFS() {\n    mst(dis,0);\n    queue&lt;int&gt; q;\n    q.push(s);\n    dis[s]=1,now[s]=head[s];\n\n    while(q.size()) {\n        int x(q.front());\n        q.pop();\n\n        for(int i(head[x]);i;i=r[i].nex) {\n            if(r[i].val and !dis[r[i].to]) {\n                int y(r[i].to);\n                q.push(y);\n                now[y]=head[y],dis[y]=dis[x]+1;\n\n                if(y==t)\n                    Heriko Romanno;\n            }\n        }\n    }\n\n    Heriko Deltana;\n}\n\nLL Dinic(int x,LL flow) {\n    if(x==t)\n        Heriko flow;\n\n    LL rst(flow),k;\n\n    for(int i(now[x]);i and rst;i=r[i].nex) {\n        int y(r[i].to);\n\n        if(r[i].val and dis[y]==dis[x]+1) {\n            k=Dinic(y,Hmin(rst,r[i].val));\n\n            if(!rst)\n                Heriko flow;\n\n            if(!k)\n                dis[y]=0;\n\n            r[i].val-=k,r[i^1].val+=k,rst-=k;\n        }\n\n        now[x]=i;\n    }\n\n    Heriko flow-rst;\n}\n\nS main() {\n    // Files();\n\n    fr(n),fr(m),fr(s),fr(t);\n\n    for(int i(1);i&lt;=m;++i) {\n        int x,y;\n        LL z;\n        fr(x),fr(y),fr(z);\n        Add(x,y,z);\n    }\n\n    LL flow(0);\n\n    while(BFS())\n        while((flow=Dinic(s,INF)))\n            ans+=flow;\n\n    fw(ans,1);\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"tarjan求强连通分量\">「Tarjan求强连通分量」</h2>\r\n<blockquote>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">template &lt;typename J&gt;\nI J Hmin(const J &amp;x,const J &amp;y) {\n    Heriko x&lt;y?x:y;\n}\n\nCI MXX(100001),NXX(10001);\n\nstruct Node {\n    int nex,to;    \n}\n\nr[MXX];\n\nint rcnt,head[NXX];\n\nI void Add(int x,int y) {\n    r[++rcnt]=(Node){head[x],y};\n    head[x]=rcnt;\n}\n\nint dfn[NXX],low[NXX],cnt,stak[NXX],top,tot,c[NXX];\n\nbitset&lt;NXX&gt; vis;\n\nvector&lt;int&gt; v[NXX];\n\nvoid Tarjan(int x) {\n    dfn[x]=low[x]=++cnt;\n    stak[++top]=x,vis[x]=1;\n\n    for(int i(head[x]);i;i=r[i].nex) {\n        int y(r[i].to);\n\n        if(!dfn[y])\n            Tarjan(y),low[x]=Hmin(low[x],low[y]);\n        else if(vis[y])\n            low[x]=Hmin(low[x],dfn[y]);\n    }\n\n    if(dfn[x]==low[x]) {\n        ++tot;\n        int tmp(0);\n\n        while(tmp!=x) {\n            tmp=stak[top--];\n            vis[tmp]=0;\n            c[tmp]=tot;\n            v[tot].push_back(tmp);\n        }\n    }\n}\n\nint n,m;\n\nS main() {\n    // Files();\n\n    fr(n),fr(m);\n\n    for(int i(1);i&lt;=m;++i) {\n        int x,y;\n        fr(x),fr(y);\n        Add(x,y);\n    }\n\n    for(int i(1);i&lt;=n;++i)\n        if(!dfn[i])\n            Tarjan(i);\n\n    fw(tot,1);\n\n    for(int i(1);i&lt;=n;++i) {\n        int x(c[i]);        \n\n        if(vis[x])\n            continue;\n\n        vis[x]=1;\n        std::sort(v[x].begin(),v[x].end());\n        int sz(v[x].size());\n\n        for(int j(0);j&lt;sz;++j)\n            fw(v[x][j],0);\n\n        puts(\"\");\n    }\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"珂朵莉树\">「珂朵莉树」</h2>\r\n<blockquote>\r\n<p>直接把我 CF896C 的代码拿过来了。</p>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">\nI LL FstPow(LL x,LL y,LL p) {\n    LL res(1);\n    x%=p;\n\n    while(y) {\n        if(y&amp;1)\n            (res*=x)%=p;\n\n        (x*=x)%=p;\n        y&gt;&gt;=1;\n    }\n\n    Heriko res;\n}//其实这个快速幂没啥用，只是下面的 Query 的时候有用到，和 ODT 本身关系不大。\n\nstruct Node {\n    LL l,r;\n    mutable LL v;\n\n    Node(LL l,LL r=0,LL v=0) : l(l),r(r),v(v) {}\n\n    I bool operator &lt; (const Node &amp;co) const {\n        Heriko l&lt;co.l;\n    }\n};\n\nset&lt;Node&gt; s;\n\nI auto Split(LL pos) {\n    auto it(s.lower_bound(Node(pos)));\n\n    if(it!=s.end() and it-&gt;l==pos)\n        Heriko it;\n\n    --it;\n\n    if(it-&gt;r&lt;pos)\n        Heriko s.end();\n\n    LL l(it-&gt;l),r(it-&gt;r),v(it-&gt;v);\n    s.erase(it);\n    s.insert(Node(l,pos-1,v));\n\n    Heriko s.insert(Node(pos,r,v)).first;\n}\n\nI void Assign(LL l,LL r,LL x) {\n    auto itr(Split(r+1)),itl(Split(l));\n    s.erase(itl,itr);\n    s.insert(Node(l,r,x));\n}\n\nI void Add(LL l,LL r,LL x) {\n    auto itr(Split(r+1)),itl(Split(l));\n\n    for(auto it(itl);it!=itr;++it)\n        it-&gt;v+=x;\n}\n\nstruct Rank {\n    LL val,cnt;\n\n    Rank(LL val,LL cnt) : val(val),cnt(cnt) {}\n\n    I bool operator &lt; (const Rank &amp;co) const {\n        Heriko val&lt;co.val;\n    }\n};\n\nI LL QueryRank(LL l,LL r,LL x) {\n    auto itr(Split(r+1)),itl(Split(l));\n    vector&lt;Rank&gt; v;\n    \n    for(auto it(itl);it!=itr;++it)\n        v.push_back(Rank(it-&gt;v,it-&gt;r-it-&gt;l+1));\n\n    sort(v.begin(),v.end());\n    LL i(0);\n\n    for(;i&lt;(LL)v.size();++i)\n        if(v[i].cnt&lt;x)\n            x-=v[i].cnt;\n        else\n            Heriko v[i].val;\n\n    Heriko v[i].val;\n}\n\nI LL QueryVal(LL l,LL r,LL x,LL y) {\n    auto itr(Split(r+1)),itl(Split(l));\n    LL res(0);\n    \n    for(auto it(itl);it!=itr;++it)\n        res=(res+FstPow(it-&gt;v,x,y)*(it-&gt;r-it-&gt;l+1)%y)%y;\n\n    Heriko res;\n}</code></pre>\r\n<h2 id=\"平面最近点对\">「平面最近点对」</h2>\r\n<blockquote>\r\n<p><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"10.835ex\" height=\"2.584ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -892 4788.9 1142\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(763,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1152,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(1918.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(278,0)\"></path><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1311,421.1) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3633.2,0)\"><path data-c=\"2061\" d=\"\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3799.9,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4399.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span> 的做法。</p>\r\n<p>UPD 2022.1.23</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">template&lt;typename J&gt;\nI J Hmin(const J &amp;x,const J &amp;y) {\n    Heriko x&lt;y?x:y;\n}\n\nCI MXX(2e5+1);\nconst double INF(1e12);\n\nI bool CMP(const pair&lt;double,double&gt; &amp;a,const pair&lt;double,double&gt; &amp;b) {\n    Heriko a.second&lt;b.second;\n}\n\nI double Dist(const pair&lt;double,double&gt; &amp;a,const pair&lt;double,double&gt; &amp;b) {\n    Heriko sqrt((long double)(a.first-b.first)*(a.first-b.first)+(long double)(a.second-b.second)*(a.second-b.second));\n}\n\nint n;\n\npair&lt;double,double&gt; a[MXX],tmp[MXX];\n\ndouble Merge(int l,int r) {\n    if(l==r)\n        Heriko INF;\n\n    int mid((l+r)&gt;&gt;1),top(0);\n    double dis(INF);\n    dis=Hmin(Merge(l,mid),Merge(mid+1,r));\n\n    for(int i(l);i&lt;=r;++i)\n        if(fabs(a[mid].first-a[i].first)&lt;dis)\n            tmp[++top]=a[i];\n\n    std::sort(tmp+1,tmp+1+top,CMP);\n\n    for(int i(1);i&lt;=top;++i)\n        for(int j(i+1);j&lt;=top;++j) {\n            if(tmp[j].second-tmp[i].second&gt;=dis)\n                break;\n            \n            dis=Hmin(dis,Dist(tmp[i],tmp[j]));\n        }\n            \n\n    Heriko dis;\n}\n\nS main() {\n    Files();\n\n    fr(n);\n\n    for(int i(1);i&lt;=n;++i)\n        scanf(\"%lf%lf\",&amp;a[i].first,&amp;a[i].second);\n\n    std::sort(a+1,a+1+n);\n    double ans(Merge(1,n));\n    printf(\"%.4lf\",ans);\n\n    Heriko Deltana;\n}</code></pre>\r\n<h2 id=\"fwt\">「FWT」</h2>\r\n<blockquote>\r\n<p>UPD 2022.5.29</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">CI MXX((1&lt;&lt;17)+5),MOD(998244353);\n\nLL n,a[MXX],b[MXX],c[MXX],A[MXX],B[MXX];\n\nI void Into() {\n    for(int i(0);i&lt;n;++i)\n        a[i]=A[i],b[i]=B[i];\n}\n\nI void GetVal() {\n    for(int i(0);i&lt;n;++i)\n        c[i]=a[i]*b[i]%MOD;\n}\n\nI void FWTOr(LL f[],LL x) {\n    for(int nw(2),k(1);nw&lt;=n;nw&lt;&lt;=1,k&lt;&lt;=1)\n        for(int i(0);i&lt;n;i+=nw)\n            for(int j(0);j&lt;k;++j)\n                (f[i+j+k]+=f[i+j]*x%MOD)%=MOD;\n}\n\nI void FWTAnd(LL f[],LL x) {\n    for(int nw(2),k(1);nw&lt;=n;nw&lt;&lt;=1,k&lt;&lt;=1)\n        for(int i(0);i&lt;n;i+=nw)\n            for(int j(0);j&lt;k;++j)\n                (f[i+j]+=f[i+j+k]*x%MOD)%=MOD;\n}\n\nI void FWTXor(LL f[],LL x) {\n    for(int nw(2),k(1);nw&lt;=n;nw&lt;&lt;=1,k&lt;&lt;=1)\n        for(int i(0);i&lt;n;i+=nw)\n            for(int j(0);j&lt;k;++j) {\n                (f[i+j]+=f[i+j+k]+MOD)%=MOD;\n                f[i+j+k]=(f[i+j]-f[i+j+k]+MOD-f[i+j+k]+MOD)%MOD;\n                (f[i+j]*=x)%=MOD,(f[i+j+k]*=x)%=MOD;\n            }\n}\n\nI LL Inv(LL x,LL y=MOD-2) {\n    LL res(1);\n\n    while(y) {\n        if(y&amp;1)\n            (res*=x)%=MOD;\n\n        (x*=x)%=MOD;\n        y&gt;&gt;=1;\n    }\n\n    Heriko res%MOD;\n}\n\nS main() {\n    Files();\n\n    fr(n);\n    n=(1&lt;&lt;n);\n\n    for(int i(0);i&lt;n;++i)\n        fr(A[i]);\n\n    for(int i(0);i&lt;n;++i)\n        fr(B[i]);\n\n    Into(),FWTOr(a,1),FWTOr(b,1),GetVal(),FWTOr(c,MOD-1);\n\n    for(int i(0);i&lt;n;++i)\n        fw(c[i],0);\n\n    puts(\"\");\n\n    Into(),FWTAnd(a,1),FWTAnd(b,1),GetVal(),FWTAnd(c,MOD-1);\n\n    for(int i(0);i&lt;n;++i)\n        fw(c[i],0);\n\n    puts(\"\");\n\n    Into(),FWTXor(a,1),FWTXor(b,1),GetVal(),FWTXor(c,Inv(2));\n\n    for(int i(0);i&lt;n;++i)\n        fw(c[i],0);\n\n    puts(\"\");\n\n    Heriko Deltana;\n}</code></pre>\r\n","feature":true,"text":"「模板库」...","link":"","photos":[],"count_time":{"symbolsCount":"40k","symbolsTime":"36 mins."},"categories":[{"name":"OI-Solutions","slug":"OI-Solutions","count":10,"path":"api/categories/OI-Solutions.json"}],"tags":[{"name":"OI","slug":"OI","count":25,"path":"api/tags/OI.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#pre\"><span class=\"toc-text\">「Pre」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">「快速排序」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B9%B6%E6%9F%A5%E9%9B%86\"><span class=\"toc-text\">「并查集」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E6%80%A7%E7%AD%9B\"><span class=\"toc-text\">「线性筛」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A0%86\"><span class=\"toc-text\">「堆」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%95%E8%B0%83%E6%A0%88\"><span class=\"toc-text\">「单调栈」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E9%80%9F%E5%B9%82\"><span class=\"toc-text\">「快速幂」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97\"><span class=\"toc-text\">「单调队列」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91\"><span class=\"toc-text\">「最小生成树」</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#prim\"><span class=\"toc-text\">「Prim」</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#kruskal\"><span class=\"toc-text\">「Kruskal」</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C\"><span class=\"toc-text\">「字符串哈希」</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E5%93%88%E5%B8%8C%E8%87%AA%E7%84%B6%E6%BA%A2%E5%87%BA\"><span class=\"toc-text\">「单哈希+自然溢出」</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E5%93%88%E5%B8%8C\"><span class=\"toc-text\">「双哈希」</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%95%E7%AB%AF%E6%9C%80%E7%9F%AD%E8%B7%AF\"><span class=\"toc-text\">「单端最短路」</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dijkstra\"><span class=\"toc-text\">「Dijkstra」</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">「树状数组」</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E7%82%B9%E4%BF%AE%E6%94%B9%E5%8C%BA%E9%97%B4%E8%AF%A2%E9%97%AE\"><span class=\"toc-text\">「单点修改区间询问」</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%BA%E9%97%B4%E4%BF%AE%E6%94%B9%E5%8D%95%E7%82%B9%E8%AF%A2%E9%97%AE\"><span class=\"toc-text\">「区间修改单点询问」</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83\"><span class=\"toc-text\">「乘法逆元」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%AB%98%E7%B2%BE%E5%BA%A6\"><span class=\"toc-text\">「高精度」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E6%AE%B5%E6%A0%91\"><span class=\"toc-text\">「线段树」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E5%B8%AD%E6%A0%91\"><span class=\"toc-text\">「主席树」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#st%E8%A1%A8\"><span class=\"toc-text\">「ST表」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E5%88%86%E6%B3%95\"><span class=\"toc-text\">「三分法」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#kmp\"><span class=\"toc-text\">「KMP」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lca\"><span class=\"toc-text\">「LCA」</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%80%8D%E5%A2%9E\"><span class=\"toc-text\">「倍增」</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%91%E5%89%96\"><span class=\"toc-text\">「树剖」</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9F%A9%E9%98%B5%E5%8A%A0%E9%80%9F\"><span class=\"toc-text\">「矩阵加速」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#spfa%E5%88%A4%E8%B4%9F%E7%8E%AF\"><span class=\"toc-text\">「SPFA判负环」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82\"><span class=\"toc-text\">「矩阵快速幂」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ac%E8%87%AA%E5%8A%A8%E6%9C%BA\"><span class=\"toc-text\">「AC自动机」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">「差分约束」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">「欧拉路径」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80\"><span class=\"toc-text\">「康托展开」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A8%81%E4%BD%90%E5%A4%AB%E5%8D%9A%E5%BC%88\"><span class=\"toc-text\">「威佐夫博弈」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%8E%AB%E9%98%9F\"><span class=\"toc-text\">「莫队」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#vector-%E5%AD%98%E5%9B%BE%E9%81%8D%E5%8E%86%E6%A8%A1%E6%9D%BF\"><span class=\"toc-text\">「vector 存图遍历模板」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#dinic\"><span class=\"toc-text\">「Dinic」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#tarjan%E6%B1%82%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F\"><span class=\"toc-text\">「Tarjan求强连通分量」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91\"><span class=\"toc-text\">「珂朵莉树」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B9%B3%E9%9D%A2%E6%9C%80%E8%BF%91%E7%82%B9%E5%AF%B9\"><span class=\"toc-text\">「平面最近点对」</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#fwt\"><span class=\"toc-text\">「FWT」</span></a></li></ol>","author":{"name":"Heriko Deltana","slug":"blog-author","avatar":"https://s2.loli.net/2022/06/18/b2uURvwiFghrGxB.jpg","link":"/","description":"ねぇねぇねぇ","socials":{"github":"https://github.com/HRiver2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/gallery/bilibili-brands.svg","link":"https://space.bilibili.com/507947803"},"Luogu":{"icon":"/gallery/user-solid.svg","link":"https://www.luogu.com.cn/user/407417"}}}},"mapped":true,"prev_post":{"title":"Note18 : 杂题二","uid":"6ac8d06e86d3b00b34b7941b81c073c9","slug":"Note18-2","date":"2021-12-06T09:16:00.000Z","updated":"2022-06-21T09:12:05.137Z","comments":true,"path":"api/articles/Note18-2.json","keywords":"HerikoDeltana,HRiver2,","cover":"/gallery/knd-idt2.jpg","text":"「第二堆持续更新的杂题」...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"OI-Solutions","slug":"OI-Solutions","count":10,"path":"api/categories/OI-Solutions.json"}],"tags":[{"name":"OI","slug":"OI","count":25,"path":"api/tags/OI.json"}],"author":{"name":"Heriko Deltana","slug":"blog-author","avatar":"https://s2.loli.net/2022/06/18/b2uURvwiFghrGxB.jpg","link":"/","description":"ねぇねぇねぇ","socials":{"github":"https://github.com/HRiver2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/gallery/bilibili-brands.svg","link":"https://space.bilibili.com/507947803"},"Luogu":{"icon":"/gallery/user-solid.svg","link":"https://www.luogu.com.cn/user/407417"}}}},"feature":true},"next_post":{"title":"FWT","uid":"1437984c9793a07a05ea1fb578f2c7d4","slug":"FWT","date":"2022-05-27T13:08:58.000Z","updated":"2022-06-06T06:57:56.420Z","comments":true,"path":"api/articles/FWT.json","keywords":"HerikoDeltana,HRiver2,","cover":null,"text":"「初学 FWT.」...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"OI-Algorithm","slug":"OI-Algorithm","count":9,"path":"api/categories/OI-Algorithm.json"}],"tags":[{"name":"OI","slug":"OI","count":25,"path":"api/tags/OI.json"}],"author":{"name":"Heriko Deltana","slug":"blog-author","avatar":"https://s2.loli.net/2022/06/18/b2uURvwiFghrGxB.jpg","link":"/","description":"ねぇねぇねぇ","socials":{"github":"https://github.com/HRiver2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/gallery/bilibili-brands.svg","link":"https://space.bilibili.com/507947803"},"Luogu":{"icon":"/gallery/user-solid.svg","link":"https://www.luogu.com.cn/user/407417"}}}}}}