{"name":"OI-Algorithm","slug":"OI-Algorithm","count":9,"postlist":[{"title":"FWT","uid":"1437984c9793a07a05ea1fb578f2c7d4","slug":"FWT","date":"2022-05-27T13:08:58.000Z","updated":"2022-05-29T03:58:27.082Z","comments":true,"path":"api/articles/FWT.json","keywords":"HerikoDeltana,HRiver2,","cover":null,"text":"初学 FWT. 主要从 xht37 的洛谷模板题解学习。 启 摘自 APIO2022 游记 下午讲的 FWT 前半段好歹跟着听懂了一部分，所以晚上就开始搞 FWT，hyl 因为之前会 FWT 于是就研究今天老师课件上很妙的定义方式，而我把 xht 的题解整会了好歹是过了板子。 前...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"OI-Algorithm","slug":"OI-Algorithm","count":9,"path":"api/categories/OI-Algorithm.json"}],"tags":[{"name":"OI","slug":"OI","count":25,"path":"api/tags/OI.json"}],"author":{"name":"Heriko Deltana","slug":"blog-author","avatar":"https://s2.loli.net/2022/05/21/WniEcsqYdjoTlg4.png","link":"/","description":"ねぇねぇねぇ","socials":{"github":"https://github.com/HRiver2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Hash 回顾","uid":"6b36ee370d1db44c985e315c41cb1521","slug":"Hash-review","date":"2022-03-25T09:26:31.000Z","updated":"2022-05-28T12:57:32.150Z","comments":true,"path":"api/articles/Hash-review.json","keywords":"HerikoDeltana,HRiver2,","cover":null,"text":"对于 Hash 的一些回顾 前言 可能要给学弟学妹普及一下这个东西，所以顺便重新回顾一下吧。 Hash 的内容还是比较宽泛的，这里主要是 OI 中常用的字符串 Hash. 本文缺省源使用：V5.3。 Hash 思想 我们总会遇到非常大不便于存储或使用的数据，换一种方式来表示往往是...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"OI-Algorithm","slug":"OI-Algorithm","count":9,"path":"api/categories/OI-Algorithm.json"}],"tags":[{"name":"OI","slug":"OI","count":25,"path":"api/tags/OI.json"}],"author":{"name":"Heriko Deltana","slug":"blog-author","avatar":"https://s2.loli.net/2022/05/21/WniEcsqYdjoTlg4.png","link":"/","description":"ねぇねぇねぇ","socials":{"github":"https://github.com/HRiver2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"李超线段树","uid":"d02391e4e5b05700cce339d30dcd4af4","slug":"Li-Chao-Tree","date":"2022-01-23T00:23:57.000Z","updated":"2022-05-28T12:57:33.446Z","comments":true,"path":"api/articles/Li-Chao-Tree.json","keywords":"HerikoDeltana,HRiver2,","cover":[],"text":"李超线段树浅学浅记。 前言 单纯的学了一下而已（ 因为尚未深入进行研究所以曰之浅学浅记。 本次浅记就主要根据洛谷 P4097 [HEOI2013]Segment 这道模板题来浅曰之，题目描述略。 思路 从一个相对好切入的点开始，实际上李超线段树某种程度上可以自己发明（？ 首先看到...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"OI-Algorithm","slug":"OI-Algorithm","count":9,"path":"api/categories/OI-Algorithm.json"}],"tags":[{"name":"OI","slug":"OI","count":25,"path":"api/tags/OI.json"}],"author":{"name":"Heriko Deltana","slug":"blog-author","avatar":"https://s2.loli.net/2022/05/21/WniEcsqYdjoTlg4.png","link":"/","description":"ねぇねぇねぇ","socials":{"github":"https://github.com/HRiver2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"线性基","uid":"d75e4c24ba3f0efb09e1f555951fc7eb","slug":"Linear-basis","date":"2021-12-09T12:40:28.000Z","updated":"2022-05-28T12:55:15.269Z","comments":true,"path":"api/articles/Linear-basis.json","keywords":"HerikoDeltana,HRiver2,","cover":null,"text":"线性基简记。 主要参考了 Menci 的线性基学习笔记。 「前置知识」 一些线性基能用到的。 下文中若未特殊说明，集合均为「无符号整数集」。 「异或和」 对于集合 ，将其中所有元素异或起来的结果。 「张成」 对于集合 的所有子集的异或和组成的集合成为 的张成，记作 换句话说就是在...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"OI-Algorithm","slug":"OI-Algorithm","count":9,"path":"api/categories/OI-Algorithm.json"}],"tags":[{"name":"OI","slug":"OI","count":25,"path":"api/tags/OI.json"}],"author":{"name":"Heriko Deltana","slug":"blog-author","avatar":"https://s2.loli.net/2022/05/21/WniEcsqYdjoTlg4.png","link":"/","description":"ねぇねぇねぇ","socials":{"github":"https://github.com/HRiver2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"平面最近点对","uid":"059d3957398e3d8d567699f700b617cb","slug":"Narest-points","date":"2022-01-04T09:16:17.000Z","updated":"2022-05-28T12:55:16.948Z","comments":true,"path":"api/articles/Narest-points.json","keywords":"HerikoDeltana,HRiver2,","cover":null,"text":"平面最近点对 闲来无事，学个新东西。 问题概述 求有 个点的平面上欧几里得距离最近的两个点。 算法 考虑分治，将当前的点集经过按照 坐标为关键字排序之后，不断的分为两段分别求解再合并。 分治是好想的，问题是如何合并。 假设我们要合并的两个区间的最近距离分别是 ，取较小值之后记作 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"OI-Algorithm","slug":"OI-Algorithm","count":9,"path":"api/categories/OI-Algorithm.json"}],"tags":[{"name":"OI","slug":"OI","count":25,"path":"api/tags/OI.json"}],"author":{"name":"Heriko Deltana","slug":"blog-author","avatar":"https://s2.loli.net/2022/05/21/WniEcsqYdjoTlg4.png","link":"/","description":"ねぇねぇねぇ","socials":{"github":"https://github.com/HRiver2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"珂朵莉树","uid":"6f7d519169fe043edd418db0d353e8aa","slug":"ODT","date":"2021-12-05T08:12:44.000Z","updated":"2022-05-28T12:55:23.361Z","comments":true,"path":"api/articles/ODT.json","keywords":"HerikoDeltana,HRiver2,","cover":null,"text":"Chtholly Tree 简记 「启」 关于为啥我要学这个？ 闲的。 本篇中所有 Code 的缺省源使用 「V5.2」. 「关于 ODT」 ODT 用处？ （大多数是）在有区间赋值操作的 DS 题里面骗分，因为好像专门为 ODT 设计的题不多吧？反正我只知道 CF896C. 时...","link":"","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"OI-Algorithm","slug":"OI-Algorithm","count":9,"path":"api/categories/OI-Algorithm.json"}],"tags":[{"name":"OI","slug":"OI","count":25,"path":"api/tags/OI.json"}],"author":{"name":"Heriko Deltana","slug":"blog-author","avatar":"https://s2.loli.net/2022/05/21/WniEcsqYdjoTlg4.png","link":"/","description":"ねぇねぇねぇ","socials":{"github":"https://github.com/HRiver2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"回滚莫队浅记","uid":"e5c71879a251033d7463f1c63679489f","slug":"Rollback-Mo-s-Algorithm","date":"2022-02-22T09:25:46.000Z","updated":"2022-05-28T12:55:23.975Z","comments":true,"path":"api/articles/Rollback-Mo-s-Algorithm.json","keywords":"HerikoDeltana,HRiver2,","cover":null,"text":"浅谈回滚莫队。 前置知识 之前写的普通莫队笔记，在这里当个前置知识，其实大约知道莫队大概就是把询问离线下来，分块并排序之后用两个指针 来更新信息统计答案即可。 有时在区间转移的时候，有些删除或添加的操作无法实现，那么当只有一种操作不能实现的时候，就可以用莫队来解决这个问题，然而普...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"OI-Algorithm","slug":"OI-Algorithm","count":9,"path":"api/categories/OI-Algorithm.json"}],"tags":[{"name":"OI","slug":"OI","count":25,"path":"api/tags/OI.json"}],"author":{"name":"Heriko Deltana","slug":"blog-author","avatar":"https://s2.loli.net/2022/05/21/WniEcsqYdjoTlg4.png","link":"/","description":"ねぇねぇねぇ","socials":{"github":"https://github.com/HRiver2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Tarjan","uid":"a6361eec591ebcf52852b67a4eecd3de","slug":"Tarjan","date":"2021-12-05T06:21:22.000Z","updated":"2022-05-28T12:55:26.054Z","comments":true,"path":"api/articles/Tarjan.json","keywords":"HerikoDeltana,HRiver2,","cover":[],"text":"铊金金。 「启」 之前一直没空写，NOIP 考前重新学了一下，虽然考场上完全没用到就是了。 大概按照 OI-Wiki 来简单写一点。 同步发布于Cnblogs. 「Pre」 首先是一些前置知识。 「强连通分量」 在有向图 中强连通是指 中的任意两个节点联通，强连通分量则是极大的强...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"OI-Algorithm","slug":"OI-Algorithm","count":9,"path":"api/categories/OI-Algorithm.json"}],"tags":[{"name":"OI","slug":"OI","count":25,"path":"api/tags/OI.json"}],"author":{"name":"Heriko Deltana","slug":"blog-author","avatar":"https://s2.loli.net/2022/05/21/WniEcsqYdjoTlg4.png","link":"/","description":"ねぇねぇねぇ","socials":{"github":"https://github.com/HRiver2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"树链剖分中的边权变点权","uid":"f5e27344f2b5924049019b3fd3c25797","slug":"Tree-chain-splitting","date":"2022-01-08T09:08:01.000Z","updated":"2022-05-28T12:55:26.236Z","comments":true,"path":"api/articles/Tree-chain-splitting.json","keywords":"HerikoDeltana,HRiver2,","cover":[],"text":"浅谈树链剖分中的边权变点权 前言 因为我只会轻重链剖分，所以下面都是说的轻重链剖分。 发现自己会写这个也有很长时间了，所以来水丶东西。 最近写了好两个，稍微借题来搞一搞，估计篇幅会很短，因为主要是简单说一说思路啥的。 思路 首先，都知道树链剖分是用来维护一棵树上的结点信息的一种思...","link":"","photos":[],"count_time":{"symbolsCount":"9.2k","symbolsTime":"8 mins."},"categories":[{"name":"OI-Algorithm","slug":"OI-Algorithm","count":9,"path":"api/categories/OI-Algorithm.json"}],"tags":[{"name":"OI","slug":"OI","count":25,"path":"api/tags/OI.json"}],"author":{"name":"Heriko Deltana","slug":"blog-author","avatar":"https://s2.loli.net/2022/05/21/WniEcsqYdjoTlg4.png","link":"/","description":"ねぇねぇねぇ","socials":{"github":"https://github.com/HRiver2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}